// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required

namespace AKNet.MSQuicWrapper
{
    public enum QUIC_TLS_PROVIDER
    {
        QUIC_TLS_PROVIDER_SCHANNEL = 0,
        QUIC_TLS_PROVIDER_OPENSSL = 1
    }

    public enum QUIC_EXECUTION_PROFILE
    {
        QUIC_EXECUTION_PROFILE_LOW_LATENCY = 0,
        QUIC_EXECUTION_PROFILE_TYPE_MAX_THROUGHPUT = 1,
        QUIC_EXECUTION_PROFILE_TYPE_SCAVENGER = 2,
        QUIC_EXECUTION_PROFILE_TYPE_REAL_TIME = 3
    }

    public enum QUIC_LOAD_BALANCING_MODE
    {
        QUIC_LOAD_BALANCING_DISABLED = 0,
        QUIC_LOAD_BALANCING_SERVER_ID_IP = 1,
        QUIC_LOAD_BALANCING_SERVER_ID_FIXED = 2,
        QUIC_LOAD_BALANCING_COUNT = 3
    }

    public enum QUIC_TLS_ALERT_CODES
    {
        QUIC_TLS_ALERT_CODE_SUCCESS = 65535,
        QUIC_TLS_ALERT_CODE_UNEXPECTED_MESSAGE = 10,
        QUIC_TLS_ALERT_CODE_BAD_CERTIFICATE = 42,
        QUIC_TLS_ALERT_CODE_UNSUPPORTED_CERTIFICATE = 43,
        QUIC_TLS_ALERT_CODE_CERTIFICATE_REVOKED = 44,
        QUIC_TLS_ALERT_CODE_CERTIFICATE_EXPIRED = 45,
        QUIC_TLS_ALERT_CODE_CERTIFICATE_UNKNOWN = 46,
        QUIC_TLS_ALERT_CODE_ILLEGAL_PARAMETER = 47,
        QUIC_TLS_ALERT_CODE_UNKNOWN_CA = 48,
        QUIC_TLS_ALERT_CODE_ACCESS_DENIED = 49,
        QUIC_TLS_ALERT_CODE_INSUFFICIENT_SECURITY = 71,
        QUIC_TLS_ALERT_CODE_INTERNAL_ERROR = 80,
        QUIC_TLS_ALERT_CODE_USER_CANCELED = 90,
        QUIC_TLS_ALERT_CODE_CERTIFICATE_REQUIRED = 116,
        QUIC_TLS_ALERT_CODE_MAX = 255
    }

    public enum QUIC_CREDENTIAL_TYPE
    {
        QUIC_CREDENTIAL_TYPE_NONE = 0,
        QUIC_CREDENTIAL_TYPE_CERTIFICATE_HASH = 1,
        QUIC_CREDENTIAL_TYPE_CERTIFICATE_HASH_STORE = 2,
        QUIC_CREDENTIAL_TYPE_CERTIFICATE_CONTEXT = 3,
        QUIC_CREDENTIAL_TYPE_CERTIFICATE_FILE = 4,
        QUIC_CREDENTIAL_TYPE_CERTIFICATE_FILE_PROTECTED = 5,
        QUIC_CREDENTIAL_TYPE_CERTIFICATE_PKCS12 = 6
    }

    [Flags]
    public enum QUIC_CREDENTIAL_FLAGS
    {
        QUIC_CREDENTIAL_FLAG_NONE = 0,
        QUIC_CREDENTIAL_FLAG_CLIENT = 1,
        QUIC_CREDENTIAL_FLAG_LOAD_ASYNCHRONOUS = 2,
        QUIC_CREDENTIAL_FLAG_NO_CERTIFICATE_VALIDATION = 4,
        QUIC_CREDENTIAL_FLAG_ENABLE_OCSP = 8,
        QUIC_CREDENTIAL_FLAG_INDICATE_CERTIFICATE_RECEIVED = 16,
        QUIC_CREDENTIAL_FLAG_DEFER_CERTIFICATE_VALIDATION = 32,
        QUIC_CREDENTIAL_FLAG_REQUIRE_CLIENT_AUTHENTICATION = 64,
        QUIC_CREDENTIAL_FLAG_USE_TLS_BUILTIN_CERTIFICATE_VALIDATION = 128,
        QUIC_CREDENTIAL_FLAG_REVOCATION_CHECK_END_CERT = 256,
        QUIC_CREDENTIAL_FLAG_REVOCATION_CHECK_CHAIN = 512,
        QUIC_CREDENTIAL_FLAG_REVOCATION_CHECK_CHAIN_EXCLUDE_ROOT = 1024,
        QUIC_CREDENTIAL_FLAG_IGNORE_NO_REVOCATION_CHECK = 2048,
        QUIC_CREDENTIAL_FLAG_IGNORE_REVOCATION_OFFLINE = 4096,
        QUIC_CREDENTIAL_FLAG_SET_ALLOWED_CIPHER_SUITES = 8192,
        QUIC_CREDENTIAL_FLAG_USE_PORTABLE_CERTIFICATES = 16384,
        QUIC_CREDENTIAL_FLAG_USE_SUPPLIED_CREDENTIALS = 32768,
        QUIC_CREDENTIAL_FLAG_USE_SYSTEM_MAPPER = 65536,
        QUIC_CREDENTIAL_FLAG_CACHE_ONLY_URL_RETRIEVAL = 131072,
        QUIC_CREDENTIAL_FLAG_REVOCATION_CHECK_CACHE_ONLY = 262144,
        QUIC_CREDENTIAL_FLAG_INPROC_PEER_CERTIFICATE = 524288,
        QUIC_CREDENTIAL_FLAG_SET_CA_CERTIFICATE_FILE = 1048576,
        QUIC_CREDENTIAL_FLAG_DISABLE_AIA = 2097152
    }

    [Flags]
    public enum QUIC_ALLOWED_CIPHER_SUITE_FLAGS
    {
        QUIC_ALLOWED_CIPHER_SUITE_NONE = 0,
        QUIC_ALLOWED_CIPHER_SUITE_AES_128GCM_SHA256 = 1,
        QUIC_ALLOWED_CIPHER_SUITE_AES_256GCM_SHA384 = 2,
        QUIC_ALLOWED_CIPHER_SUITE_CHACHA20POLY1305SHA256 = 4
    }

    public enum QUIC_CERTIFICATE_HASH_STORE_FLAGS
    {
        QUIC_CERTIFICATE_HASH_STORE_FLAG_NONE = 0,
        QUIC_CERTIFICATE_HASH_STORE_FLAG_MACHINE_STORE = 1
    }

    public enum QUIC_CONNECTION_SHUTDOWN_FLAGS
    {
        QUIC_CONNECTION_SHUTDOWN_FLAG_NONE = 0,
        QUIC_CONNECTION_SHUTDOWN_FLAG_SILENT = 1
    }

    public enum QUIC_SERVER_RESUMPTION_LEVEL
    {
        QUIC_SERVER_NO_RESUME = 0,
        QUIC_SERVER_RESUME_ONLY = 1,
        QUIC_SERVER_RESUME_AND_ZERORTT = 2
    }

    public enum QUIC_SEND_RESUMPTION_FLAGS
    {
        QUIC_SEND_RESUMPTION_FLAG_NONE = 0,
        QUIC_SEND_RESUMPTION_FLAG_FINAL = 1
    }

    public enum QUIC_STREAM_SCHEDULING_SCHEME
    {
        QUIC_STREAM_SCHEDULING_SCHEME_FIFO = 0,
        QUIC_STREAM_SCHEDULING_SCHEME_ROUND_ROBIN = 1,
        QUIC_STREAM_SCHEDULING_SCHEME_COUNT = 2
    }

    [Flags]
    public enum QUIC_STREAM_OPEN_FLAGS
    {
        QUIC_STREAM_OPEN_FLAG_NONE = 0,
        QUIC_STREAM_OPEN_FLAG_UNIDIRECTIONAL = 1,
        QUIC_STREAM_OPEN_FLAG_0RTT = 2,
        QUIC_STREAM_OPEN_FLAG_DELAY_ID_FC_UPDATES = 4
    }

    [Flags]
    public enum QUIC_STREAM_START_FLAGS
    {
        QUIC_STREAM_START_FLAG_NONE = 0,
        QUIC_STREAM_START_FLAG_IMMEDIATE = 1,
        QUIC_STREAM_START_FLAG_FAIL_BLOCKED = 2,
        QUIC_STREAM_START_FLAG_SHUTDOWN_ON_FAIL = 4,
        QUIC_STREAM_START_FLAG_INDICATE_PEER_ACCEPT = 8,
        QUIC_STREAM_START_FLAG_PRIORITY_WORK = 16
    }

    public enum QUIC_STREAM_SHUTDOWN_FLAGS
    {
        QUIC_STREAM_SHUTDOWN_FLAG_NONE = 0,
        QUIC_STREAM_SHUTDOWN_FLAG_GRACEFUL = 1,
        QUIC_STREAM_SHUTDOWN_FLAG_ABORT_SEND = 2,
        QUIC_STREAM_SHUTDOWN_FLAG_ABORT_RECEIVE = 4,
        QUIC_STREAM_SHUTDOWN_FLAG_ABORT = 6,
        QUIC_STREAM_SHUTDOWN_FLAG_IMMEDIATE = 8,
        QUIC_STREAM_SHUTDOWN_FLAG_INLINE = 16
    }

    public enum QUIC_RECEIVE_FLAGS
    {
        QUIC_RECEIVE_FLAG_NONE = 0,
        QUIC_RECEIVE_FLAG_0RTT = 1,
        QUIC_RECEIVE_FLAG_FIN = 2
    }

    [Flags]
    public enum QUIC_SEND_FLAGS
    {
        QUIC_SEND_FLAG_NONE = 0,
        QUIC_SEND_FLAG_ALLOW_0RTT = 1,
        QUIC_SEND_FLAG_START = 2,
        QUIC_SEND_FLAG_FIN = 4,
        QUIC_SEND_FLAG_DGRAM_PRIORITY = 8,
        QUIC_SEND_FLAG_DELAY_SEND = 16,
        QUIC_SEND_FLAG_CANCEL_ON_LOSS = 32,
        QUIC_SEND_FLAG_PRIORITY_WORK = 64
    }

    public enum QUIC_DATAGRAM_SEND_STATE
    {
        QUIC_DATAGRAM_SEND_UNKNOWN = 0,
        QUIC_DATAGRAM_SEND_SENT = 1,
        QUIC_DATAGRAM_SEND_LOST_SUSPECT = 2,
        QUIC_DATAGRAM_SEND_LOST_DISCARDED = 3,
        QUIC_DATAGRAM_SEND_ACKNOWLEDGED = 4,
        QUIC_DATAGRAM_SEND_ACKNOWLEDGED_SPURIOUS = 5,
        QUIC_DATAGRAM_SEND_CANCELED = 6
    }

    public enum QUIC_EXECUTION_CONFIG_FLAGS
    {
        QUIC_EXECUTION_CONFIG_FLAG_NONE = 0
    }

    public enum QUIC_TLS_PROTOCOL_VERSION
    {
        QUIC_TLS_PROTOCOL_UNKNOWN = 0,
        QUIC_TLS_PROTOCOL_1_3 = 12288
    }

    public enum QUIC_CIPHER_ALGORITHM
    {
        QUIC_CIPHER_ALGORITHM_NONE = 0,
        QUIC_CIPHER_ALGORITHM_AES_128 = 26126,
        QUIC_CIPHER_ALGORITHM_AES_256 = 26128,
        QUIC_CIPHER_ALGORITHM_CHACHA20 = 26130
    }

    public enum QUIC_HASH_ALGORITHM
    {
        QUIC_HASH_ALGORITHM_NONE = 0,
        QUIC_HASH_ALGORITHM_SHA_256 = 32780,
        QUIC_HASH_ALGORITHM_SHA_384 = 32781
    }

    public enum QUIC_KEY_EXCHANGE_ALGORITHM
    {
        QUIC_KEY_EXCHANGE_ALGORITHM_NONE = 0
    }

    public enum QUIC_CIPHER_SUITE
    {
        QUIC_CIPHER_SUITE_TLS_AES_128GCM_SHA256 = 4865,
        QUIC_CIPHER_SUITE_TLS_AES_256GCM_SHA384 = 4866,
        QUIC_CIPHER_SUITE_TLS_CHACHA20POLY1305SHA256 = 4867
    }

    public enum QUIC_CONGESTION_CONTROL_ALGORITHM
    {
        QUIC_CONGESTION_CONTROL_ALGORITHM_CUBIC = 0,
        QUIC_CONGESTION_CONTROL_ALGORITHM_MAX = 1
    }

    public enum QUIC_PERFORMANCE_COUNTERS
    {
        QUIC_PERF_COUNTER_CONN_CREATED = 0,
        QUIC_PERF_COUNTER_CONN_HANDSHAKE_FAIL = 1,
        QUIC_PERF_COUNTER_CONN_APP_REJECT = 2,
        QUIC_PERF_COUNTER_CONN_RESUMED = 3,
        QUIC_PERF_COUNTER_CONN_ACTIVE = 4,
        QUIC_PERF_COUNTER_CONN_CONNECTED = 5,
        QUIC_PERF_COUNTER_CONN_PROTOCOL_ERRORS = 6,
        QUIC_PERF_COUNTER_CONN_NO_ALPN = 7,
        QUIC_PERF_COUNTER_STRM_ACTIVE = 8,
        QUIC_PERF_COUNTER_PKTS_SUSPECTED_LOST = 9,
        QUIC_PERF_COUNTER_PKTS_DROPPED = 10,
        QUIC_PERF_COUNTER_PKTS_DECRYPTION_FAIL = 11,
        QUIC_PERF_COUNTER_UDP_RECV = 12,
        QUIC_PERF_COUNTER_UDP_SEND = 13,
        QUIC_PERF_COUNTER_UDP_RECV_BYTES = 14,
        QUIC_PERF_COUNTER_UDP_SEND_BYTES = 15,
        QUIC_PERF_COUNTER_UDP_RECV_EVENTS = 16,
        QUIC_PERF_COUNTER_UDP_SEND_CALLS = 17,
        QUIC_PERF_COUNTER_APP_SEND_BYTES = 18,
        QUIC_PERF_COUNTER_APP_RECV_BYTES = 19,
        QUIC_PERF_COUNTER_CONN_QUEUE_DEPTH = 20,
        QUIC_PERF_COUNTER_CONN_OPER_QUEUE_DEPTH = 21,
        QUIC_PERF_COUNTER_CONN_OPER_QUEUED = 22,
        QUIC_PERF_COUNTER_CONN_OPER_COMPLETED = 23,
        QUIC_PERF_COUNTER_WORK_OPER_QUEUE_DEPTH = 24,
        QUIC_PERF_COUNTER_WORK_OPER_QUEUED = 25,
        QUIC_PERF_COUNTER_WORK_OPER_COMPLETED = 26,
        QUIC_PERF_COUNTER_PATH_VALIDATED = 27,
        QUIC_PERF_COUNTER_PATH_FAILURE = 28,
        QUIC_PERF_COUNTER_SEND_STATELESS_RESET = 29,
        QUIC_PERF_COUNTER_SEND_STATELESS_RETRY = 30,
        QUIC_PERF_COUNTER_CONN_LOAD_REJECT = 31,
        QUIC_PERF_COUNTER_MAX = 32
    }

    public enum QUIC_LISTENER_EVENT_TYPE
    {
        QUIC_LISTENER_EVENT_NEW_CONNECTION = 0,
        QUIC_LISTENER_EVENT_STOP_COMPLETE = 1
    }

    public enum QUIC_CONNECTION_EVENT_TYPE
    {
        QUIC_CONNECTION_EVENT_CONNECTED = 0,
        QUIC_CONNECTION_EVENT_SHUTDOWN_INITIATED_BY_TRANSPORT = 1,
        QUIC_CONNECTION_EVENT_SHUTDOWN_INITIATED_BY_PEER = 2,
        QUIC_CONNECTION_EVENT_SHUTDOWN_COMPLETE = 3,
        QUIC_CONNECTION_EVENT_LOCAL_ADDRESS_CHANGED = 4,
        QUIC_CONNECTION_EVENT_PEER_ADDRESS_CHANGED = 5,
        QUIC_CONNECTION_EVENT_PEER_STREAM_STARTED = 6,
        QUIC_CONNECTION_EVENT_STREAMS_AVAILABLE = 7,
        QUIC_CONNECTION_EVENT_PEER_NEEDS_STREAMS = 8,
        QUIC_CONNECTION_EVENT_IDEAL_PROCESSOR_CHANGED = 9,
        QUIC_CONNECTION_EVENT_DATAGRAM_STATE_CHANGED = 10,
        QUIC_CONNECTION_EVENT_DATAGRAM_RECEIVED = 11,
        QUIC_CONNECTION_EVENT_DATAGRAM_SEND_STATE_CHANGED = 12,
        QUIC_CONNECTION_EVENT_RESUMED = 13,
        QUIC_CONNECTION_EVENT_RESUMPTION_TICKET_RECEIVED = 14,
        QUIC_CONNECTION_EVENT_PEER_CERTIFICATE_RECEIVED = 15
    }

    public enum QUIC_STREAM_EVENT_TYPE
    {
        QUIC_STREAM_EVENT_START_COMPLETE = 0,
        QUIC_STREAM_EVENT_RECEIVE = 1,
        QUIC_STREAM_EVENT_SEND_COMPLETE = 2,
        QUIC_STREAM_EVENT_PEER_SEND_SHUTDOWN = 3,
        QUIC_STREAM_EVENT_PEER_SEND_ABORTED = 4,
        QUIC_STREAM_EVENT_PEER_RECEIVE_ABORTED = 5,
        QUIC_STREAM_EVENT_SEND_SHUTDOWN_COMPLETE = 6,
        QUIC_STREAM_EVENT_SHUTDOWN_COMPLETE = 7,
        QUIC_STREAM_EVENT_IDEAL_SEND_BUFFER_SIZE = 8,
        QUIC_STREAM_EVENT_PEER_ACCEPTED = 9,
        QUIC_STREAM_EVENT_CANCEL_ON_LOSS = 10
    }

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void QUIC_SET_CONTEXT_FN(__IntPtr Handle, __IntPtr Context);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate __IntPtr QUIC_GET_CONTEXT_FN(__IntPtr Handle);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void QUIC_SET_CALLBACK_HANDLER_FN(__IntPtr Handle, __IntPtr Handler, __IntPtr Context);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate int QUIC_SET_PARAM_FN(__IntPtr Handle, uint Param, uint BufferLength, __IntPtr Buffer);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate int QUIC_GET_PARAM_FN(__IntPtr Handle, uint Param, uint* BufferLength, __IntPtr Buffer);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate int QUIC_REGISTRATION_OPEN_FN(__IntPtr Config, __IntPtr Registration);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void QUIC_REGISTRATION_CLOSE_FN(__IntPtr Registration);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void QUIC_REGISTRATION_SHUTDOWN_FN(__IntPtr Registration, global::AKNet.MSQuicWrapper.QUIC_CONNECTION_SHUTDOWN_FLAGS Flags, ulong ErrorCode);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate int QUIC_CONFIGURATION_OPEN_FN(__IntPtr Registration, __IntPtr AlpnBuffers, uint AlpnBufferCount, __IntPtr Settings, uint SettingsSize, __IntPtr Context, __IntPtr Configuration);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void QUIC_CONFIGURATION_CLOSE_FN(__IntPtr Configuration);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate int QUIC_CONFIGURATION_LOAD_CREDENTIAL_FN(__IntPtr Configuration, __IntPtr CredConfig);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate int QUIC_LISTENER_OPEN_FN(__IntPtr Registration, __IntPtr Handler, __IntPtr Context, __IntPtr Listener);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void QUIC_LISTENER_CLOSE_FN(__IntPtr Listener);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void QUIC_LISTENER_STOP_FN(__IntPtr Listener);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate int QUIC_CONNECTION_OPEN_FN(__IntPtr Registration, __IntPtr Handler, __IntPtr Context, __IntPtr Connection);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void QUIC_CONNECTION_CLOSE_FN(__IntPtr Connection);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void QUIC_CONNECTION_SHUTDOWN_FN(__IntPtr Connection, global::AKNet.MSQuicWrapper.QUIC_CONNECTION_SHUTDOWN_FLAGS Flags, ulong ErrorCode);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate int QUIC_CONNECTION_START_FN(__IntPtr Connection, __IntPtr Configuration, ushort Family, [MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(CppSharp.Runtime.UTF8Marshaller))] string ServerName, ushort ServerPort);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate int QUIC_CONNECTION_SET_CONFIGURATION_FN(__IntPtr Connection, __IntPtr Configuration);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate int QUIC_CONNECTION_SEND_RESUMPTION_FN(__IntPtr Connection, global::AKNet.MSQuicWrapper.QUIC_SEND_RESUMPTION_FLAGS Flags, ushort DataLength, byte* ResumptionData);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate int QUIC_CONNECTION_COMP_RESUMPTION_FN(__IntPtr Connection, byte Result);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate int QUIC_CONNECTION_COMP_CERT_FN(__IntPtr Connection, byte Result, global::AKNet.MSQuicWrapper.QUIC_TLS_ALERT_CODES TlsAlert);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate int QUIC_STREAM_OPEN_FN(__IntPtr Connection, global::AKNet.MSQuicWrapper.QUIC_STREAM_OPEN_FLAGS Flags, __IntPtr Handler, __IntPtr Context, __IntPtr Stream);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void QUIC_STREAM_CLOSE_FN(__IntPtr Stream);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate int QUIC_STREAM_START_FN(__IntPtr Stream, global::AKNet.MSQuicWrapper.QUIC_STREAM_START_FLAGS Flags);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate int QUIC_STREAM_SHUTDOWN_FN(__IntPtr Stream, global::AKNet.MSQuicWrapper.QUIC_STREAM_SHUTDOWN_FLAGS Flags, ulong ErrorCode);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate int QUIC_STREAM_SEND_FN(__IntPtr Stream, __IntPtr Buffers, uint BufferCount, global::AKNet.MSQuicWrapper.QUIC_SEND_FLAGS Flags, __IntPtr ClientSendContext);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void QUIC_STREAM_RECEIVE_COMPLETE_FN(__IntPtr Stream, ulong BufferLength);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate int QUIC_STREAM_RECEIVE_SET_ENABLED_FN(__IntPtr Stream, byte IsEnabled);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate int QUIC_DATAGRAM_SEND_FN(__IntPtr Connection, __IntPtr Buffers, uint BufferCount, global::AKNet.MSQuicWrapper.QUIC_SEND_FLAGS Flags, __IntPtr ClientSendContext);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate int MsQuicOpenVersionFn(uint Version, __IntPtr* QuicApi);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(__CallingConvention.Cdecl)]
    public unsafe delegate void MsQuicCloseFn(__IntPtr QuicApi);

    public unsafe partial class QUIC_HANDLE
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_HANDLE> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_HANDLE>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::AKNet.MSQuicWrapper.QUIC_HANDLE managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::AKNet.MSQuicWrapper.QUIC_HANDLE managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static QUIC_HANDLE __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new QUIC_HANDLE(native.ToPointer(), skipVTables);
        }

        internal static QUIC_HANDLE __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (QUIC_HANDLE)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static QUIC_HANDLE __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new QUIC_HANDLE(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private QUIC_HANDLE(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected QUIC_HANDLE(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class QUIC_EXECUTION_CONFIG : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal global::AKNet.MSQuicWrapper.QUIC_EXECUTION_CONFIG_FLAGS Flags;
            internal uint PollingIdleTimeoutUs;
            internal uint ProcessorCount;
            internal fixed ushort ProcessorList[1];

            [SuppressUnmanagedCodeSecurity, DllImport("MSQuicSSL_Wrapper", EntryPoint = "??0QUIC_EXECUTION_CONFIG@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_EXECUTION_CONFIG> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_EXECUTION_CONFIG>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::AKNet.MSQuicWrapper.QUIC_EXECUTION_CONFIG managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::AKNet.MSQuicWrapper.QUIC_EXECUTION_CONFIG managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static QUIC_EXECUTION_CONFIG __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new QUIC_EXECUTION_CONFIG(native.ToPointer(), skipVTables);
        }

        internal static QUIC_EXECUTION_CONFIG __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (QUIC_EXECUTION_CONFIG)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static QUIC_EXECUTION_CONFIG __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new QUIC_EXECUTION_CONFIG(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private QUIC_EXECUTION_CONFIG(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected QUIC_EXECUTION_CONFIG(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public QUIC_EXECUTION_CONFIG()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_EXECUTION_CONFIG.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public QUIC_EXECUTION_CONFIG(global::AKNet.MSQuicWrapper.QUIC_EXECUTION_CONFIG _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_EXECUTION_CONFIG.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::AKNet.MSQuicWrapper.QUIC_EXECUTION_CONFIG.__Internal*) __Instance) = *((global::AKNet.MSQuicWrapper.QUIC_EXECUTION_CONFIG.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::AKNet.MSQuicWrapper.QUIC_EXECUTION_CONFIG_FLAGS Flags
        {
            get
            {
                return ((__Internal*)__Instance)->Flags;
            }

            set
            {
                ((__Internal*)__Instance)->Flags = value;
            }
        }

        public uint PollingIdleTimeoutUs
        {
            get
            {
                return ((__Internal*)__Instance)->PollingIdleTimeoutUs;
            }

            set
            {
                ((__Internal*)__Instance)->PollingIdleTimeoutUs = value;
            }
        }

        public uint ProcessorCount
        {
            get
            {
                return ((__Internal*)__Instance)->ProcessorCount;
            }

            set
            {
                ((__Internal*)__Instance)->ProcessorCount = value;
            }
        }

        public ushort[] ProcessorList
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<ushort>(((__Internal*)__Instance)->ProcessorList, 1);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 1; i++)
                        ((__Internal*)__Instance)->ProcessorList[i] = value[i];
                }
            }
        }
    }

    public unsafe partial class QUIC_REGISTRATION_CONFIG : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal __IntPtr AppName;
            internal global::AKNet.MSQuicWrapper.QUIC_EXECUTION_PROFILE ExecutionProfile;

            [SuppressUnmanagedCodeSecurity, DllImport("MSQuicSSL_Wrapper", EntryPoint = "??0QUIC_REGISTRATION_CONFIG@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_REGISTRATION_CONFIG> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_REGISTRATION_CONFIG>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::AKNet.MSQuicWrapper.QUIC_REGISTRATION_CONFIG managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::AKNet.MSQuicWrapper.QUIC_REGISTRATION_CONFIG managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        private bool __AppName_OwnsNativeMemory = false;
        protected bool __ownsNativeInstance;

        internal static QUIC_REGISTRATION_CONFIG __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new QUIC_REGISTRATION_CONFIG(native.ToPointer(), skipVTables);
        }

        internal static QUIC_REGISTRATION_CONFIG __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (QUIC_REGISTRATION_CONFIG)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static QUIC_REGISTRATION_CONFIG __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new QUIC_REGISTRATION_CONFIG(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private QUIC_REGISTRATION_CONFIG(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected QUIC_REGISTRATION_CONFIG(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public QUIC_REGISTRATION_CONFIG()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_REGISTRATION_CONFIG.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public QUIC_REGISTRATION_CONFIG(global::AKNet.MSQuicWrapper.QUIC_REGISTRATION_CONFIG _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_REGISTRATION_CONFIG.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::AKNet.MSQuicWrapper.QUIC_REGISTRATION_CONFIG.__Internal*) __Instance) = *((global::AKNet.MSQuicWrapper.QUIC_REGISTRATION_CONFIG.__Internal*) _0.__Instance);
            if (_0.__AppName_OwnsNativeMemory)
                this.AppName = _0.AppName;
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__AppName_OwnsNativeMemory)
                Marshal.FreeHGlobal(((__Internal*)__Instance)->AppName);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public string AppName
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ((__Internal*)__Instance)->AppName);
            }

            set
            {
                if (__AppName_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->AppName);
                __AppName_OwnsNativeMemory = true;
                if (value == null)
                {
                    ((__Internal*)__Instance)->AppName = global::System.IntPtr.Zero;
                    return;
                }
                var __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                var __bytePtr0 = Marshal.AllocHGlobal(__bytes0.Length + 1);
                Marshal.Copy(__bytes0, 0, __bytePtr0, __bytes0.Length);
                Marshal.WriteByte(__bytePtr0 + __bytes0.Length, 0);
                ((__Internal*)__Instance)->AppName = (__IntPtr) __bytePtr0;
            }
        }

        public global::AKNet.MSQuicWrapper.QUIC_EXECUTION_PROFILE ExecutionProfile
        {
            get
            {
                return ((__Internal*)__Instance)->ExecutionProfile;
            }

            set
            {
                ((__Internal*)__Instance)->ExecutionProfile = value;
            }
        }
    }

    public unsafe partial class QUIC_CERTIFICATE_HASH : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 20)]
        public partial struct __Internal
        {
            internal fixed byte ShaHash[20];

            [SuppressUnmanagedCodeSecurity, DllImport("MSQuicSSL_Wrapper", EntryPoint = "??0QUIC_CERTIFICATE_HASH@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_HASH> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_HASH>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_HASH managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_HASH managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static QUIC_CERTIFICATE_HASH __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new QUIC_CERTIFICATE_HASH(native.ToPointer(), skipVTables);
        }

        internal static QUIC_CERTIFICATE_HASH __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (QUIC_CERTIFICATE_HASH)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static QUIC_CERTIFICATE_HASH __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new QUIC_CERTIFICATE_HASH(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private QUIC_CERTIFICATE_HASH(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected QUIC_CERTIFICATE_HASH(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public QUIC_CERTIFICATE_HASH()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_HASH.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public QUIC_CERTIFICATE_HASH(global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_HASH _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_HASH.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_HASH.__Internal*) __Instance) = *((global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_HASH.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public byte[] ShaHash
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<byte>(((__Internal*)__Instance)->ShaHash, 20);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 20; i++)
                        ((__Internal*)__Instance)->ShaHash[i] = value[i];
                }
            }
        }
    }

    public unsafe partial class QUIC_CERTIFICATE_HASH_STORE : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 152)]
        public partial struct __Internal
        {
            internal global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_HASH_STORE_FLAGS Flags;
            internal fixed byte ShaHash[20];
            internal fixed sbyte StoreName[128];

            [SuppressUnmanagedCodeSecurity, DllImport("MSQuicSSL_Wrapper", EntryPoint = "??0QUIC_CERTIFICATE_HASH_STORE@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_HASH_STORE> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_HASH_STORE>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_HASH_STORE managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_HASH_STORE managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static QUIC_CERTIFICATE_HASH_STORE __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new QUIC_CERTIFICATE_HASH_STORE(native.ToPointer(), skipVTables);
        }

        internal static QUIC_CERTIFICATE_HASH_STORE __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (QUIC_CERTIFICATE_HASH_STORE)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static QUIC_CERTIFICATE_HASH_STORE __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new QUIC_CERTIFICATE_HASH_STORE(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private QUIC_CERTIFICATE_HASH_STORE(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected QUIC_CERTIFICATE_HASH_STORE(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public QUIC_CERTIFICATE_HASH_STORE()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_HASH_STORE.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public QUIC_CERTIFICATE_HASH_STORE(global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_HASH_STORE _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_HASH_STORE.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_HASH_STORE.__Internal*) __Instance) = *((global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_HASH_STORE.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_HASH_STORE_FLAGS Flags
        {
            get
            {
                return ((__Internal*)__Instance)->Flags;
            }

            set
            {
                ((__Internal*)__Instance)->Flags = value;
            }
        }

        public byte[] ShaHash
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<byte>(((__Internal*)__Instance)->ShaHash, 20);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 20; i++)
                        ((__Internal*)__Instance)->ShaHash[i] = value[i];
                }
            }
        }

        public sbyte[] StoreName
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<sbyte>(((__Internal*)__Instance)->StoreName, 128);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 128; i++)
                        ((__Internal*)__Instance)->StoreName[i] = value[i];
                }
            }
        }
    }

    public unsafe partial class QUIC_CERTIFICATE_FILE : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal __IntPtr PrivateKeyFile;
            internal __IntPtr CertificateFile;

            [SuppressUnmanagedCodeSecurity, DllImport("MSQuicSSL_Wrapper", EntryPoint = "??0QUIC_CERTIFICATE_FILE@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_FILE> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_FILE>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_FILE managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_FILE managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        private bool __PrivateKeyFile_OwnsNativeMemory = false;
        private bool __CertificateFile_OwnsNativeMemory = false;
        protected bool __ownsNativeInstance;

        internal static QUIC_CERTIFICATE_FILE __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new QUIC_CERTIFICATE_FILE(native.ToPointer(), skipVTables);
        }

        internal static QUIC_CERTIFICATE_FILE __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (QUIC_CERTIFICATE_FILE)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static QUIC_CERTIFICATE_FILE __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new QUIC_CERTIFICATE_FILE(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private QUIC_CERTIFICATE_FILE(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected QUIC_CERTIFICATE_FILE(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public QUIC_CERTIFICATE_FILE()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_FILE.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public QUIC_CERTIFICATE_FILE(global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_FILE _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_FILE.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_FILE.__Internal*) __Instance) = *((global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_FILE.__Internal*) _0.__Instance);
            if (_0.__PrivateKeyFile_OwnsNativeMemory)
                this.PrivateKeyFile = _0.PrivateKeyFile;
            if (_0.__CertificateFile_OwnsNativeMemory)
                this.CertificateFile = _0.CertificateFile;
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__PrivateKeyFile_OwnsNativeMemory)
                Marshal.FreeHGlobal(((__Internal*)__Instance)->PrivateKeyFile);
            if (__CertificateFile_OwnsNativeMemory)
                Marshal.FreeHGlobal(((__Internal*)__Instance)->CertificateFile);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public string PrivateKeyFile
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ((__Internal*)__Instance)->PrivateKeyFile);
            }

            set
            {
                if (__PrivateKeyFile_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->PrivateKeyFile);
                __PrivateKeyFile_OwnsNativeMemory = true;
                if (value == null)
                {
                    ((__Internal*)__Instance)->PrivateKeyFile = global::System.IntPtr.Zero;
                    return;
                }
                var __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                var __bytePtr0 = Marshal.AllocHGlobal(__bytes0.Length + 1);
                Marshal.Copy(__bytes0, 0, __bytePtr0, __bytes0.Length);
                Marshal.WriteByte(__bytePtr0 + __bytes0.Length, 0);
                ((__Internal*)__Instance)->PrivateKeyFile = (__IntPtr) __bytePtr0;
            }
        }

        public string CertificateFile
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ((__Internal*)__Instance)->CertificateFile);
            }

            set
            {
                if (__CertificateFile_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->CertificateFile);
                __CertificateFile_OwnsNativeMemory = true;
                if (value == null)
                {
                    ((__Internal*)__Instance)->CertificateFile = global::System.IntPtr.Zero;
                    return;
                }
                var __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                var __bytePtr0 = Marshal.AllocHGlobal(__bytes0.Length + 1);
                Marshal.Copy(__bytes0, 0, __bytePtr0, __bytes0.Length);
                Marshal.WriteByte(__bytePtr0 + __bytes0.Length, 0);
                ((__Internal*)__Instance)->CertificateFile = (__IntPtr) __bytePtr0;
            }
        }
    }

    public unsafe partial class QUIC_CERTIFICATE_FILE_PROTECTED : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 24)]
        public partial struct __Internal
        {
            internal __IntPtr PrivateKeyFile;
            internal __IntPtr CertificateFile;
            internal __IntPtr PrivateKeyPassword;

            [SuppressUnmanagedCodeSecurity, DllImport("MSQuicSSL_Wrapper", EntryPoint = "??0QUIC_CERTIFICATE_FILE_PROTECTED@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_FILE_PROTECTED> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_FILE_PROTECTED>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_FILE_PROTECTED managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_FILE_PROTECTED managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        private bool __PrivateKeyFile_OwnsNativeMemory = false;
        private bool __CertificateFile_OwnsNativeMemory = false;
        private bool __PrivateKeyPassword_OwnsNativeMemory = false;
        protected bool __ownsNativeInstance;

        internal static QUIC_CERTIFICATE_FILE_PROTECTED __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new QUIC_CERTIFICATE_FILE_PROTECTED(native.ToPointer(), skipVTables);
        }

        internal static QUIC_CERTIFICATE_FILE_PROTECTED __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (QUIC_CERTIFICATE_FILE_PROTECTED)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static QUIC_CERTIFICATE_FILE_PROTECTED __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new QUIC_CERTIFICATE_FILE_PROTECTED(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private QUIC_CERTIFICATE_FILE_PROTECTED(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected QUIC_CERTIFICATE_FILE_PROTECTED(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public QUIC_CERTIFICATE_FILE_PROTECTED()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_FILE_PROTECTED.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public QUIC_CERTIFICATE_FILE_PROTECTED(global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_FILE_PROTECTED _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_FILE_PROTECTED.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_FILE_PROTECTED.__Internal*) __Instance) = *((global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_FILE_PROTECTED.__Internal*) _0.__Instance);
            if (_0.__PrivateKeyFile_OwnsNativeMemory)
                this.PrivateKeyFile = _0.PrivateKeyFile;
            if (_0.__CertificateFile_OwnsNativeMemory)
                this.CertificateFile = _0.CertificateFile;
            if (_0.__PrivateKeyPassword_OwnsNativeMemory)
                this.PrivateKeyPassword = _0.PrivateKeyPassword;
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__PrivateKeyFile_OwnsNativeMemory)
                Marshal.FreeHGlobal(((__Internal*)__Instance)->PrivateKeyFile);
            if (__CertificateFile_OwnsNativeMemory)
                Marshal.FreeHGlobal(((__Internal*)__Instance)->CertificateFile);
            if (__PrivateKeyPassword_OwnsNativeMemory)
                Marshal.FreeHGlobal(((__Internal*)__Instance)->PrivateKeyPassword);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public string PrivateKeyFile
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ((__Internal*)__Instance)->PrivateKeyFile);
            }

            set
            {
                if (__PrivateKeyFile_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->PrivateKeyFile);
                __PrivateKeyFile_OwnsNativeMemory = true;
                if (value == null)
                {
                    ((__Internal*)__Instance)->PrivateKeyFile = global::System.IntPtr.Zero;
                    return;
                }
                var __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                var __bytePtr0 = Marshal.AllocHGlobal(__bytes0.Length + 1);
                Marshal.Copy(__bytes0, 0, __bytePtr0, __bytes0.Length);
                Marshal.WriteByte(__bytePtr0 + __bytes0.Length, 0);
                ((__Internal*)__Instance)->PrivateKeyFile = (__IntPtr) __bytePtr0;
            }
        }

        public string CertificateFile
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ((__Internal*)__Instance)->CertificateFile);
            }

            set
            {
                if (__CertificateFile_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->CertificateFile);
                __CertificateFile_OwnsNativeMemory = true;
                if (value == null)
                {
                    ((__Internal*)__Instance)->CertificateFile = global::System.IntPtr.Zero;
                    return;
                }
                var __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                var __bytePtr0 = Marshal.AllocHGlobal(__bytes0.Length + 1);
                Marshal.Copy(__bytes0, 0, __bytePtr0, __bytes0.Length);
                Marshal.WriteByte(__bytePtr0 + __bytes0.Length, 0);
                ((__Internal*)__Instance)->CertificateFile = (__IntPtr) __bytePtr0;
            }
        }

        public string PrivateKeyPassword
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ((__Internal*)__Instance)->PrivateKeyPassword);
            }

            set
            {
                if (__PrivateKeyPassword_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->PrivateKeyPassword);
                __PrivateKeyPassword_OwnsNativeMemory = true;
                if (value == null)
                {
                    ((__Internal*)__Instance)->PrivateKeyPassword = global::System.IntPtr.Zero;
                    return;
                }
                var __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                var __bytePtr0 = Marshal.AllocHGlobal(__bytes0.Length + 1);
                Marshal.Copy(__bytes0, 0, __bytePtr0, __bytes0.Length);
                Marshal.WriteByte(__bytePtr0 + __bytes0.Length, 0);
                ((__Internal*)__Instance)->PrivateKeyPassword = (__IntPtr) __bytePtr0;
            }
        }
    }

    public unsafe partial class QUIC_CERTIFICATE_PKCS12 : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 24)]
        public partial struct __Internal
        {
            internal __IntPtr Asn1Blob;
            internal uint Asn1BlobLength;
            internal __IntPtr PrivateKeyPassword;

            [SuppressUnmanagedCodeSecurity, DllImport("MSQuicSSL_Wrapper", EntryPoint = "??0QUIC_CERTIFICATE_PKCS12@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_PKCS12> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_PKCS12>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_PKCS12 managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_PKCS12 managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        private bool __PrivateKeyPassword_OwnsNativeMemory = false;
        protected bool __ownsNativeInstance;

        internal static QUIC_CERTIFICATE_PKCS12 __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new QUIC_CERTIFICATE_PKCS12(native.ToPointer(), skipVTables);
        }

        internal static QUIC_CERTIFICATE_PKCS12 __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (QUIC_CERTIFICATE_PKCS12)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static QUIC_CERTIFICATE_PKCS12 __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new QUIC_CERTIFICATE_PKCS12(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private QUIC_CERTIFICATE_PKCS12(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected QUIC_CERTIFICATE_PKCS12(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public QUIC_CERTIFICATE_PKCS12()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_PKCS12.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public QUIC_CERTIFICATE_PKCS12(global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_PKCS12 _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_PKCS12.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_PKCS12.__Internal*) __Instance) = *((global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_PKCS12.__Internal*) _0.__Instance);
            if (_0.__PrivateKeyPassword_OwnsNativeMemory)
                this.PrivateKeyPassword = _0.PrivateKeyPassword;
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__PrivateKeyPassword_OwnsNativeMemory)
                Marshal.FreeHGlobal(((__Internal*)__Instance)->PrivateKeyPassword);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public byte* Asn1Blob
        {
            get
            {
                return (byte*) ((__Internal*)__Instance)->Asn1Blob;
            }
        }

        public uint Asn1BlobLength
        {
            get
            {
                return ((__Internal*)__Instance)->Asn1BlobLength;
            }

            set
            {
                ((__Internal*)__Instance)->Asn1BlobLength = value;
            }
        }

        public string PrivateKeyPassword
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ((__Internal*)__Instance)->PrivateKeyPassword);
            }

            set
            {
                if (__PrivateKeyPassword_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->PrivateKeyPassword);
                __PrivateKeyPassword_OwnsNativeMemory = true;
                if (value == null)
                {
                    ((__Internal*)__Instance)->PrivateKeyPassword = global::System.IntPtr.Zero;
                    return;
                }
                var __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                var __bytePtr0 = Marshal.AllocHGlobal(__bytes0.Length + 1);
                Marshal.Copy(__bytes0, 0, __bytePtr0, __bytes0.Length);
                Marshal.WriteByte(__bytePtr0 + __bytes0.Length, 0);
                ((__Internal*)__Instance)->PrivateKeyPassword = (__IntPtr) __bytePtr0;
            }
        }
    }

    public unsafe partial class QUIC_CREDENTIAL_CONFIG : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::AKNet.MSQuicWrapper.QUIC_CREDENTIAL_TYPE Type;

            [FieldOffset(4)]
            internal global::AKNet.MSQuicWrapper.QUIC_CREDENTIAL_FLAGS Flags;

            [FieldOffset(8)]
            internal __IntPtr CertificateHash;

            [FieldOffset(8)]
            internal __IntPtr CertificateHashStore;

            [FieldOffset(8)]
            internal __IntPtr CertificateContext;

            [FieldOffset(8)]
            internal __IntPtr CertificateFile;

            [FieldOffset(8)]
            internal __IntPtr CertificateFileProtected;

            [FieldOffset(8)]
            internal __IntPtr CertificatePkcs12;

            [FieldOffset(16)]
            internal __IntPtr Principal;

            [FieldOffset(24)]
            internal __IntPtr Reserved;

            [FieldOffset(32)]
            internal __IntPtr AsyncHandler;

            [FieldOffset(40)]
            internal global::AKNet.MSQuicWrapper.QUIC_ALLOWED_CIPHER_SUITE_FLAGS AllowedCipherSuites;

            [FieldOffset(48)]
            internal __IntPtr CaCertificateFile;

            [SuppressUnmanagedCodeSecurity, DllImport("MSQuicSSL_Wrapper", EntryPoint = "??0QUIC_CREDENTIAL_CONFIG@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_CREDENTIAL_CONFIG> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_CREDENTIAL_CONFIG>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::AKNet.MSQuicWrapper.QUIC_CREDENTIAL_CONFIG managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::AKNet.MSQuicWrapper.QUIC_CREDENTIAL_CONFIG managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        private bool __Principal_OwnsNativeMemory = false;
        private bool __CaCertificateFile_OwnsNativeMemory = false;
        protected bool __ownsNativeInstance;

        internal static QUIC_CREDENTIAL_CONFIG __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new QUIC_CREDENTIAL_CONFIG(native.ToPointer(), skipVTables);
        }

        internal static QUIC_CREDENTIAL_CONFIG __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (QUIC_CREDENTIAL_CONFIG)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static QUIC_CREDENTIAL_CONFIG __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new QUIC_CREDENTIAL_CONFIG(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private QUIC_CREDENTIAL_CONFIG(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected QUIC_CREDENTIAL_CONFIG(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public QUIC_CREDENTIAL_CONFIG()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_CREDENTIAL_CONFIG.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public QUIC_CREDENTIAL_CONFIG(global::AKNet.MSQuicWrapper.QUIC_CREDENTIAL_CONFIG _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_CREDENTIAL_CONFIG.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::AKNet.MSQuicWrapper.QUIC_CREDENTIAL_CONFIG.__Internal*) __Instance) = *((global::AKNet.MSQuicWrapper.QUIC_CREDENTIAL_CONFIG.__Internal*) _0.__Instance);
            if (_0.__Principal_OwnsNativeMemory)
                this.Principal = _0.Principal;
            if (_0.__CaCertificateFile_OwnsNativeMemory)
                this.CaCertificateFile = _0.CaCertificateFile;
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__Principal_OwnsNativeMemory)
                Marshal.FreeHGlobal(((__Internal*)__Instance)->Principal);
            if (__CaCertificateFile_OwnsNativeMemory)
                Marshal.FreeHGlobal(((__Internal*)__Instance)->CaCertificateFile);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::AKNet.MSQuicWrapper.QUIC_CREDENTIAL_TYPE Type
        {
            get
            {
                return ((__Internal*)__Instance)->Type;
            }

            set
            {
                ((__Internal*)__Instance)->Type = value;
            }
        }

        public global::AKNet.MSQuicWrapper.QUIC_CREDENTIAL_FLAGS Flags
        {
            get
            {
                return ((__Internal*)__Instance)->Flags;
            }

            set
            {
                ((__Internal*)__Instance)->Flags = value;
            }
        }

        public global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_HASH CertificateHash
        {
            get
            {
                var __result0 = global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_HASH.__GetOrCreateInstance(((__Internal*)__Instance)->CertificateHash, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->CertificateHash = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_HASH_STORE CertificateHashStore
        {
            get
            {
                var __result0 = global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_HASH_STORE.__GetOrCreateInstance(((__Internal*)__Instance)->CertificateHashStore, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->CertificateHashStore = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public __IntPtr CertificateContext
        {
            get
            {
                return ((__Internal*)__Instance)->CertificateContext;
            }

            set
            {
                ((__Internal*)__Instance)->CertificateContext = (__IntPtr) value;
            }
        }

        public global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_FILE CertificateFile
        {
            get
            {
                var __result0 = global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_FILE.__GetOrCreateInstance(((__Internal*)__Instance)->CertificateFile, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->CertificateFile = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_FILE_PROTECTED CertificateFileProtected
        {
            get
            {
                var __result0 = global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_FILE_PROTECTED.__GetOrCreateInstance(((__Internal*)__Instance)->CertificateFileProtected, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->CertificateFileProtected = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_PKCS12 CertificatePkcs12
        {
            get
            {
                var __result0 = global::AKNet.MSQuicWrapper.QUIC_CERTIFICATE_PKCS12.__GetOrCreateInstance(((__Internal*)__Instance)->CertificatePkcs12, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->CertificatePkcs12 = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public string Principal
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ((__Internal*)__Instance)->Principal);
            }

            set
            {
                if (__Principal_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->Principal);
                __Principal_OwnsNativeMemory = true;
                if (value == null)
                {
                    ((__Internal*)__Instance)->Principal = global::System.IntPtr.Zero;
                    return;
                }
                var __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                var __bytePtr0 = Marshal.AllocHGlobal(__bytes0.Length + 1);
                Marshal.Copy(__bytes0, 0, __bytePtr0, __bytes0.Length);
                Marshal.WriteByte(__bytePtr0 + __bytes0.Length, 0);
                ((__Internal*)__Instance)->Principal = (__IntPtr) __bytePtr0;
            }
        }

        public __IntPtr Reserved
        {
            get
            {
                return ((__Internal*)__Instance)->Reserved;
            }

            set
            {
                ((__Internal*)__Instance)->Reserved = (__IntPtr) value;
            }
        }

        public __IntPtr AsyncHandler
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->AsyncHandler;
                return __ptr0 == IntPtr.Zero? null : (__IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(__IntPtr));
            }

            set
            {
                ((__Internal*)__Instance)->AsyncHandler = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::AKNet.MSQuicWrapper.QUIC_ALLOWED_CIPHER_SUITE_FLAGS AllowedCipherSuites
        {
            get
            {
                return ((__Internal*)__Instance)->AllowedCipherSuites;
            }

            set
            {
                ((__Internal*)__Instance)->AllowedCipherSuites = value;
            }
        }

        public string CaCertificateFile
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ((__Internal*)__Instance)->CaCertificateFile);
            }

            set
            {
                if (__CaCertificateFile_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->CaCertificateFile);
                __CaCertificateFile_OwnsNativeMemory = true;
                if (value == null)
                {
                    ((__Internal*)__Instance)->CaCertificateFile = global::System.IntPtr.Zero;
                    return;
                }
                var __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                var __bytePtr0 = Marshal.AllocHGlobal(__bytes0.Length + 1);
                Marshal.Copy(__bytes0, 0, __bytePtr0, __bytes0.Length);
                Marshal.WriteByte(__bytePtr0 + __bytes0.Length, 0);
                ((__Internal*)__Instance)->CaCertificateFile = (__IntPtr) __bytePtr0;
            }
        }
    }

    public unsafe partial class QUIC_TICKET_KEY_CONFIG : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 81)]
        public partial struct __Internal
        {
            internal fixed byte Id[16];
            internal fixed byte Material[64];
            internal byte MaterialLength;

            [SuppressUnmanagedCodeSecurity, DllImport("MSQuicSSL_Wrapper", EntryPoint = "??0QUIC_TICKET_KEY_CONFIG@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_TICKET_KEY_CONFIG> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_TICKET_KEY_CONFIG>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::AKNet.MSQuicWrapper.QUIC_TICKET_KEY_CONFIG managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::AKNet.MSQuicWrapper.QUIC_TICKET_KEY_CONFIG managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static QUIC_TICKET_KEY_CONFIG __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new QUIC_TICKET_KEY_CONFIG(native.ToPointer(), skipVTables);
        }

        internal static QUIC_TICKET_KEY_CONFIG __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (QUIC_TICKET_KEY_CONFIG)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static QUIC_TICKET_KEY_CONFIG __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new QUIC_TICKET_KEY_CONFIG(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private QUIC_TICKET_KEY_CONFIG(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected QUIC_TICKET_KEY_CONFIG(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public QUIC_TICKET_KEY_CONFIG()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_TICKET_KEY_CONFIG.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public QUIC_TICKET_KEY_CONFIG(global::AKNet.MSQuicWrapper.QUIC_TICKET_KEY_CONFIG _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_TICKET_KEY_CONFIG.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::AKNet.MSQuicWrapper.QUIC_TICKET_KEY_CONFIG.__Internal*) __Instance) = *((global::AKNet.MSQuicWrapper.QUIC_TICKET_KEY_CONFIG.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public byte[] Id
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<byte>(((__Internal*)__Instance)->Id, 16);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 16; i++)
                        ((__Internal*)__Instance)->Id[i] = value[i];
                }
            }
        }

        public byte[] Material
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<byte>(((__Internal*)__Instance)->Material, 64);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 64; i++)
                        ((__Internal*)__Instance)->Material[i] = value[i];
                }
            }
        }

        public byte MaterialLength
        {
            get
            {
                return ((__Internal*)__Instance)->MaterialLength;
            }

            set
            {
                ((__Internal*)__Instance)->MaterialLength = value;
            }
        }
    }

    public unsafe partial class QUIC_BUFFER : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal uint Length;
            internal __IntPtr Buffer;

            [SuppressUnmanagedCodeSecurity, DllImport("MSQuicSSL_Wrapper", EntryPoint = "??0QUIC_BUFFER@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_BUFFER> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_BUFFER>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::AKNet.MSQuicWrapper.QUIC_BUFFER managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::AKNet.MSQuicWrapper.QUIC_BUFFER managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static QUIC_BUFFER __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new QUIC_BUFFER(native.ToPointer(), skipVTables);
        }

        internal static QUIC_BUFFER __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (QUIC_BUFFER)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static QUIC_BUFFER __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new QUIC_BUFFER(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private QUIC_BUFFER(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected QUIC_BUFFER(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public QUIC_BUFFER()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_BUFFER.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public QUIC_BUFFER(global::AKNet.MSQuicWrapper.QUIC_BUFFER _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_BUFFER.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::AKNet.MSQuicWrapper.QUIC_BUFFER.__Internal*) __Instance) = *((global::AKNet.MSQuicWrapper.QUIC_BUFFER.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Length
        {
            get
            {
                return ((__Internal*)__Instance)->Length;
            }

            set
            {
                ((__Internal*)__Instance)->Length = value;
            }
        }

        public byte* Buffer
        {
            get
            {
                return (byte*) ((__Internal*)__Instance)->Buffer;
            }

            set
            {
                ((__Internal*)__Instance)->Buffer = (__IntPtr) value;
            }
        }
    }

    public unsafe partial class QUIC_NEW_CONNECTION_INFO : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 72)]
        public partial struct __Internal
        {
            internal uint QuicVersion;
            internal __IntPtr LocalAddress;
            internal __IntPtr RemoteAddress;
            internal uint CryptoBufferLength;
            internal ushort ClientAlpnListLength;
            internal ushort ServerNameLength;
            internal byte NegotiatedAlpnLength;
            internal __IntPtr CryptoBuffer;
            internal __IntPtr ClientAlpnList;
            internal __IntPtr NegotiatedAlpn;
            internal __IntPtr ServerName;

            [SuppressUnmanagedCodeSecurity, DllImport("MSQuicSSL_Wrapper", EntryPoint = "??0QUIC_NEW_CONNECTION_INFO@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_NEW_CONNECTION_INFO> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_NEW_CONNECTION_INFO>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::AKNet.MSQuicWrapper.QUIC_NEW_CONNECTION_INFO managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::AKNet.MSQuicWrapper.QUIC_NEW_CONNECTION_INFO managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        private bool __ServerName_OwnsNativeMemory = false;
        protected bool __ownsNativeInstance;

        internal static QUIC_NEW_CONNECTION_INFO __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new QUIC_NEW_CONNECTION_INFO(native.ToPointer(), skipVTables);
        }

        internal static QUIC_NEW_CONNECTION_INFO __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (QUIC_NEW_CONNECTION_INFO)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static QUIC_NEW_CONNECTION_INFO __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new QUIC_NEW_CONNECTION_INFO(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private QUIC_NEW_CONNECTION_INFO(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected QUIC_NEW_CONNECTION_INFO(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public QUIC_NEW_CONNECTION_INFO()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_NEW_CONNECTION_INFO.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public QUIC_NEW_CONNECTION_INFO(global::AKNet.MSQuicWrapper.QUIC_NEW_CONNECTION_INFO _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_NEW_CONNECTION_INFO.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::AKNet.MSQuicWrapper.QUIC_NEW_CONNECTION_INFO.__Internal*) __Instance) = *((global::AKNet.MSQuicWrapper.QUIC_NEW_CONNECTION_INFO.__Internal*) _0.__Instance);
            if (_0.__ServerName_OwnsNativeMemory)
                this.ServerName = _0.ServerName;
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ServerName_OwnsNativeMemory)
                Marshal.FreeHGlobal(((__Internal*)__Instance)->ServerName);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint QuicVersion
        {
            get
            {
                return ((__Internal*)__Instance)->QuicVersion;
            }

            set
            {
                ((__Internal*)__Instance)->QuicVersion = value;
            }
        }

        public uint CryptoBufferLength
        {
            get
            {
                return ((__Internal*)__Instance)->CryptoBufferLength;
            }

            set
            {
                ((__Internal*)__Instance)->CryptoBufferLength = value;
            }
        }

        public ushort ClientAlpnListLength
        {
            get
            {
                return ((__Internal*)__Instance)->ClientAlpnListLength;
            }

            set
            {
                ((__Internal*)__Instance)->ClientAlpnListLength = value;
            }
        }

        public ushort ServerNameLength
        {
            get
            {
                return ((__Internal*)__Instance)->ServerNameLength;
            }

            set
            {
                ((__Internal*)__Instance)->ServerNameLength = value;
            }
        }

        public byte NegotiatedAlpnLength
        {
            get
            {
                return ((__Internal*)__Instance)->NegotiatedAlpnLength;
            }

            set
            {
                ((__Internal*)__Instance)->NegotiatedAlpnLength = value;
            }
        }

        public byte* CryptoBuffer
        {
            get
            {
                return (byte*) ((__Internal*)__Instance)->CryptoBuffer;
            }
        }

        public byte* ClientAlpnList
        {
            get
            {
                return (byte*) ((__Internal*)__Instance)->ClientAlpnList;
            }
        }

        public byte* NegotiatedAlpn
        {
            get
            {
                return (byte*) ((__Internal*)__Instance)->NegotiatedAlpn;
            }
        }

        public string ServerName
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, ((__Internal*)__Instance)->ServerName);
            }

            set
            {
                if (__ServerName_OwnsNativeMemory)
                    Marshal.FreeHGlobal(((__Internal*)__Instance)->ServerName);
                __ServerName_OwnsNativeMemory = true;
                if (value == null)
                {
                    ((__Internal*)__Instance)->ServerName = global::System.IntPtr.Zero;
                    return;
                }
                var __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                var __bytePtr0 = Marshal.AllocHGlobal(__bytes0.Length + 1);
                Marshal.Copy(__bytes0, 0, __bytePtr0, __bytes0.Length);
                Marshal.WriteByte(__bytePtr0 + __bytes0.Length, 0);
                ((__Internal*)__Instance)->ServerName = (__IntPtr) __bytePtr0;
            }
        }
    }

    public unsafe partial class QUIC_HANDSHAKE_INFO : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 32)]
        public partial struct __Internal
        {
            internal global::AKNet.MSQuicWrapper.QUIC_TLS_PROTOCOL_VERSION TlsProtocolVersion;
            internal global::AKNet.MSQuicWrapper.QUIC_CIPHER_ALGORITHM CipherAlgorithm;
            internal int CipherStrength;
            internal global::AKNet.MSQuicWrapper.QUIC_HASH_ALGORITHM Hash;
            internal int HashStrength;
            internal global::AKNet.MSQuicWrapper.QUIC_KEY_EXCHANGE_ALGORITHM KeyExchangeAlgorithm;
            internal int KeyExchangeStrength;
            internal global::AKNet.MSQuicWrapper.QUIC_CIPHER_SUITE CipherSuite;

            [SuppressUnmanagedCodeSecurity, DllImport("MSQuicSSL_Wrapper", EntryPoint = "??0QUIC_HANDSHAKE_INFO@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_HANDSHAKE_INFO> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_HANDSHAKE_INFO>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::AKNet.MSQuicWrapper.QUIC_HANDSHAKE_INFO managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::AKNet.MSQuicWrapper.QUIC_HANDSHAKE_INFO managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static QUIC_HANDSHAKE_INFO __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new QUIC_HANDSHAKE_INFO(native.ToPointer(), skipVTables);
        }

        internal static QUIC_HANDSHAKE_INFO __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (QUIC_HANDSHAKE_INFO)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static QUIC_HANDSHAKE_INFO __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new QUIC_HANDSHAKE_INFO(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private QUIC_HANDSHAKE_INFO(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected QUIC_HANDSHAKE_INFO(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public QUIC_HANDSHAKE_INFO()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_HANDSHAKE_INFO.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public QUIC_HANDSHAKE_INFO(global::AKNet.MSQuicWrapper.QUIC_HANDSHAKE_INFO _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_HANDSHAKE_INFO.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::AKNet.MSQuicWrapper.QUIC_HANDSHAKE_INFO.__Internal*) __Instance) = *((global::AKNet.MSQuicWrapper.QUIC_HANDSHAKE_INFO.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::AKNet.MSQuicWrapper.QUIC_TLS_PROTOCOL_VERSION TlsProtocolVersion
        {
            get
            {
                return ((__Internal*)__Instance)->TlsProtocolVersion;
            }

            set
            {
                ((__Internal*)__Instance)->TlsProtocolVersion = value;
            }
        }

        public global::AKNet.MSQuicWrapper.QUIC_CIPHER_ALGORITHM CipherAlgorithm
        {
            get
            {
                return ((__Internal*)__Instance)->CipherAlgorithm;
            }

            set
            {
                ((__Internal*)__Instance)->CipherAlgorithm = value;
            }
        }

        public int CipherStrength
        {
            get
            {
                return ((__Internal*)__Instance)->CipherStrength;
            }

            set
            {
                ((__Internal*)__Instance)->CipherStrength = value;
            }
        }

        public global::AKNet.MSQuicWrapper.QUIC_HASH_ALGORITHM Hash
        {
            get
            {
                return ((__Internal*)__Instance)->Hash;
            }

            set
            {
                ((__Internal*)__Instance)->Hash = value;
            }
        }

        public int HashStrength
        {
            get
            {
                return ((__Internal*)__Instance)->HashStrength;
            }

            set
            {
                ((__Internal*)__Instance)->HashStrength = value;
            }
        }

        public global::AKNet.MSQuicWrapper.QUIC_KEY_EXCHANGE_ALGORITHM KeyExchangeAlgorithm
        {
            get
            {
                return ((__Internal*)__Instance)->KeyExchangeAlgorithm;
            }

            set
            {
                ((__Internal*)__Instance)->KeyExchangeAlgorithm = value;
            }
        }

        public int KeyExchangeStrength
        {
            get
            {
                return ((__Internal*)__Instance)->KeyExchangeStrength;
            }

            set
            {
                ((__Internal*)__Instance)->KeyExchangeStrength = value;
            }
        }

        public global::AKNet.MSQuicWrapper.QUIC_CIPHER_SUITE CipherSuite
        {
            get
            {
                return ((__Internal*)__Instance)->CipherSuite;
            }

            set
            {
                ((__Internal*)__Instance)->CipherSuite = value;
            }
        }
    }

    public unsafe partial class QUIC_STATISTICS : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 200)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal ulong CorrelationId;

            [FieldOffset(8)]
            internal uint VersionNegotiation;

            [FieldOffset(8)]
            internal uint StatelessRetry;

            [FieldOffset(8)]
            internal uint ResumptionAttempted;

            [FieldOffset(8)]
            internal uint ResumptionSucceeded;

            [FieldOffset(12)]
            internal uint Rtt;

            [FieldOffset(16)]
            internal uint MinRtt;

            [FieldOffset(20)]
            internal uint MaxRtt;

            [FieldOffset(24)]
            internal global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Timing.__Internal Timing;

            [FieldOffset(48)]
            internal global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Handshake.__Internal Handshake;

            [FieldOffset(64)]
            internal global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Send.__Internal Send;

            [FieldOffset(128)]
            internal global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Recv.__Internal Recv;

            [FieldOffset(192)]
            internal global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Misc.__Internal Misc;

            [SuppressUnmanagedCodeSecurity, DllImport("MSQuicSSL_Wrapper", EntryPoint = "??0QUIC_STATISTICS@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public unsafe partial class Timing : IDisposable
        {
            [StructLayout(LayoutKind.Sequential, Size = 24)]
            public partial struct __Internal
            {
                internal ulong Start;
                internal ulong InitialFlightEnd;
                internal ulong HandshakeFlightEnd;

                [SuppressUnmanagedCodeSecurity, DllImport("MSQuicSSL_Wrapper", EntryPoint = "??0<unnamed-type-Timing>@QUIC_STATISTICS@@QEAA@AEBU01@@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
            }

            public __IntPtr __Instance { get; protected set; }

            internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Timing> NativeToManagedMap =
                new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Timing>();

            internal static void __RecordNativeToManagedMapping(IntPtr native, global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Timing managed)
            {
                NativeToManagedMap[native] = managed;
            }

            internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Timing managed)
            {
    
                return NativeToManagedMap.TryGetValue(native, out managed);
            }

            protected bool __ownsNativeInstance;

            internal static Timing __CreateInstance(__IntPtr native, bool skipVTables = false)
            {
                if (native == __IntPtr.Zero)
                    return null;
                return new Timing(native.ToPointer(), skipVTables);
            }

            internal static Timing __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
            {
                if (native == __IntPtr.Zero)
                    return null;
                if (__TryGetNativeToManagedMapping(native, out var managed))
                    return (Timing)managed;
                var result = __CreateInstance(native, skipVTables);
                if (saveInstance)
                    __RecordNativeToManagedMapping(native, result);
                return result;
            }

            internal static Timing __CreateInstance(__Internal native, bool skipVTables = false)
            {
                return new Timing(native, skipVTables);
            }

            private static void* __CopyValue(__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(__Internal));
                *(__Internal*) ret = native;
                return ret.ToPointer();
            }

            private Timing(__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                __RecordNativeToManagedMapping(__Instance, this);
            }

            protected Timing(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new __IntPtr(native);
            }

            public Timing()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Timing.__Internal));
                __ownsNativeInstance = true;
                __RecordNativeToManagedMapping(__Instance, this);
            }

            public Timing(global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Timing _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Timing.__Internal));
                __ownsNativeInstance = true;
                __RecordNativeToManagedMapping(__Instance, this);
                *((global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Timing.__Internal*) __Instance) = *((global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Timing.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            }

            partial void DisposePartial(bool disposing);

            internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
            {
                if (__Instance == IntPtr.Zero)
                    return;
                NativeToManagedMap.TryRemove(__Instance, out _);
                DisposePartial(disposing);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public ulong Start
            {
                get
                {
                    return ((__Internal*)__Instance)->Start;
                }

                set
                {
                    ((__Internal*)__Instance)->Start = value;
                }
            }

            public ulong InitialFlightEnd
            {
                get
                {
                    return ((__Internal*)__Instance)->InitialFlightEnd;
                }

                set
                {
                    ((__Internal*)__Instance)->InitialFlightEnd = value;
                }
            }

            public ulong HandshakeFlightEnd
            {
                get
                {
                    return ((__Internal*)__Instance)->HandshakeFlightEnd;
                }

                set
                {
                    ((__Internal*)__Instance)->HandshakeFlightEnd = value;
                }
            }
        }

        public unsafe partial class Handshake : IDisposable
        {
            [StructLayout(LayoutKind.Sequential, Size = 12)]
            public partial struct __Internal
            {
                internal uint ClientFlight1Bytes;
                internal uint ServerFlight1Bytes;
                internal uint ClientFlight2Bytes;

                [SuppressUnmanagedCodeSecurity, DllImport("MSQuicSSL_Wrapper", EntryPoint = "??0<unnamed-type-Handshake>@QUIC_STATISTICS@@QEAA@AEBU01@@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
            }

            public __IntPtr __Instance { get; protected set; }

            internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Handshake> NativeToManagedMap =
                new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Handshake>();

            internal static void __RecordNativeToManagedMapping(IntPtr native, global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Handshake managed)
            {
                NativeToManagedMap[native] = managed;
            }

            internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Handshake managed)
            {
    
                return NativeToManagedMap.TryGetValue(native, out managed);
            }

            protected bool __ownsNativeInstance;

            internal static Handshake __CreateInstance(__IntPtr native, bool skipVTables = false)
            {
                if (native == __IntPtr.Zero)
                    return null;
                return new Handshake(native.ToPointer(), skipVTables);
            }

            internal static Handshake __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
            {
                if (native == __IntPtr.Zero)
                    return null;
                if (__TryGetNativeToManagedMapping(native, out var managed))
                    return (Handshake)managed;
                var result = __CreateInstance(native, skipVTables);
                if (saveInstance)
                    __RecordNativeToManagedMapping(native, result);
                return result;
            }

            internal static Handshake __CreateInstance(__Internal native, bool skipVTables = false)
            {
                return new Handshake(native, skipVTables);
            }

            private static void* __CopyValue(__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(__Internal));
                *(__Internal*) ret = native;
                return ret.ToPointer();
            }

            private Handshake(__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                __RecordNativeToManagedMapping(__Instance, this);
            }

            protected Handshake(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new __IntPtr(native);
            }

            public Handshake()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Handshake.__Internal));
                __ownsNativeInstance = true;
                __RecordNativeToManagedMapping(__Instance, this);
            }

            public Handshake(global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Handshake _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Handshake.__Internal));
                __ownsNativeInstance = true;
                __RecordNativeToManagedMapping(__Instance, this);
                *((global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Handshake.__Internal*) __Instance) = *((global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Handshake.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            }

            partial void DisposePartial(bool disposing);

            internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
            {
                if (__Instance == IntPtr.Zero)
                    return;
                NativeToManagedMap.TryRemove(__Instance, out _);
                DisposePartial(disposing);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public uint ClientFlight1Bytes
            {
                get
                {
                    return ((__Internal*)__Instance)->ClientFlight1Bytes;
                }

                set
                {
                    ((__Internal*)__Instance)->ClientFlight1Bytes = value;
                }
            }

            public uint ServerFlight1Bytes
            {
                get
                {
                    return ((__Internal*)__Instance)->ServerFlight1Bytes;
                }

                set
                {
                    ((__Internal*)__Instance)->ServerFlight1Bytes = value;
                }
            }

            public uint ClientFlight2Bytes
            {
                get
                {
                    return ((__Internal*)__Instance)->ClientFlight2Bytes;
                }

                set
                {
                    ((__Internal*)__Instance)->ClientFlight2Bytes = value;
                }
            }
        }

        public unsafe partial class Send : IDisposable
        {
            [StructLayout(LayoutKind.Sequential, Size = 64)]
            public partial struct __Internal
            {
                internal ushort PathMtu;
                internal ulong TotalPackets;
                internal ulong RetransmittablePackets;
                internal ulong SuspectedLostPackets;
                internal ulong SpuriousLostPackets;
                internal ulong TotalBytes;
                internal ulong TotalStreamBytes;
                internal uint CongestionCount;
                internal uint PersistentCongestionCount;

                [SuppressUnmanagedCodeSecurity, DllImport("MSQuicSSL_Wrapper", EntryPoint = "??0<unnamed-type-Send>@QUIC_STATISTICS@@QEAA@AEBU01@@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
            }

            public __IntPtr __Instance { get; protected set; }

            internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Send> NativeToManagedMap =
                new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Send>();

            internal static void __RecordNativeToManagedMapping(IntPtr native, global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Send managed)
            {
                NativeToManagedMap[native] = managed;
            }

            internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Send managed)
            {
    
                return NativeToManagedMap.TryGetValue(native, out managed);
            }

            protected bool __ownsNativeInstance;

            internal static Send __CreateInstance(__IntPtr native, bool skipVTables = false)
            {
                if (native == __IntPtr.Zero)
                    return null;
                return new Send(native.ToPointer(), skipVTables);
            }

            internal static Send __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
            {
                if (native == __IntPtr.Zero)
                    return null;
                if (__TryGetNativeToManagedMapping(native, out var managed))
                    return (Send)managed;
                var result = __CreateInstance(native, skipVTables);
                if (saveInstance)
                    __RecordNativeToManagedMapping(native, result);
                return result;
            }

            internal static Send __CreateInstance(__Internal native, bool skipVTables = false)
            {
                return new Send(native, skipVTables);
            }

            private static void* __CopyValue(__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(__Internal));
                *(__Internal*) ret = native;
                return ret.ToPointer();
            }

            private Send(__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                __RecordNativeToManagedMapping(__Instance, this);
            }

            protected Send(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new __IntPtr(native);
            }

            public Send()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Send.__Internal));
                __ownsNativeInstance = true;
                __RecordNativeToManagedMapping(__Instance, this);
            }

            public Send(global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Send _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Send.__Internal));
                __ownsNativeInstance = true;
                __RecordNativeToManagedMapping(__Instance, this);
                *((global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Send.__Internal*) __Instance) = *((global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Send.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            }

            partial void DisposePartial(bool disposing);

            internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
            {
                if (__Instance == IntPtr.Zero)
                    return;
                NativeToManagedMap.TryRemove(__Instance, out _);
                DisposePartial(disposing);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public ushort PathMtu
            {
                get
                {
                    return ((__Internal*)__Instance)->PathMtu;
                }

                set
                {
                    ((__Internal*)__Instance)->PathMtu = value;
                }
            }

            public ulong TotalPackets
            {
                get
                {
                    return ((__Internal*)__Instance)->TotalPackets;
                }

                set
                {
                    ((__Internal*)__Instance)->TotalPackets = value;
                }
            }

            public ulong RetransmittablePackets
            {
                get
                {
                    return ((__Internal*)__Instance)->RetransmittablePackets;
                }

                set
                {
                    ((__Internal*)__Instance)->RetransmittablePackets = value;
                }
            }

            public ulong SuspectedLostPackets
            {
                get
                {
                    return ((__Internal*)__Instance)->SuspectedLostPackets;
                }

                set
                {
                    ((__Internal*)__Instance)->SuspectedLostPackets = value;
                }
            }

            public ulong SpuriousLostPackets
            {
                get
                {
                    return ((__Internal*)__Instance)->SpuriousLostPackets;
                }

                set
                {
                    ((__Internal*)__Instance)->SpuriousLostPackets = value;
                }
            }

            public ulong TotalBytes
            {
                get
                {
                    return ((__Internal*)__Instance)->TotalBytes;
                }

                set
                {
                    ((__Internal*)__Instance)->TotalBytes = value;
                }
            }

            public ulong TotalStreamBytes
            {
                get
                {
                    return ((__Internal*)__Instance)->TotalStreamBytes;
                }

                set
                {
                    ((__Internal*)__Instance)->TotalStreamBytes = value;
                }
            }

            public uint CongestionCount
            {
                get
                {
                    return ((__Internal*)__Instance)->CongestionCount;
                }

                set
                {
                    ((__Internal*)__Instance)->CongestionCount = value;
                }
            }

            public uint PersistentCongestionCount
            {
                get
                {
                    return ((__Internal*)__Instance)->PersistentCongestionCount;
                }

                set
                {
                    ((__Internal*)__Instance)->PersistentCongestionCount = value;
                }
            }
        }

        public unsafe partial class Recv : IDisposable
        {
            [StructLayout(LayoutKind.Sequential, Size = 64)]
            public partial struct __Internal
            {
                internal ulong TotalPackets;
                internal ulong ReorderedPackets;
                internal ulong DroppedPackets;
                internal ulong DuplicatePackets;
                internal ulong TotalBytes;
                internal ulong TotalStreamBytes;
                internal ulong DecryptionFailures;
                internal ulong ValidAckFrames;

                [SuppressUnmanagedCodeSecurity, DllImport("MSQuicSSL_Wrapper", EntryPoint = "??0<unnamed-type-Recv>@QUIC_STATISTICS@@QEAA@AEBU01@@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
            }

            public __IntPtr __Instance { get; protected set; }

            internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Recv> NativeToManagedMap =
                new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Recv>();

            internal static void __RecordNativeToManagedMapping(IntPtr native, global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Recv managed)
            {
                NativeToManagedMap[native] = managed;
            }

            internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Recv managed)
            {
    
                return NativeToManagedMap.TryGetValue(native, out managed);
            }

            protected bool __ownsNativeInstance;

            internal static Recv __CreateInstance(__IntPtr native, bool skipVTables = false)
            {
                if (native == __IntPtr.Zero)
                    return null;
                return new Recv(native.ToPointer(), skipVTables);
            }

            internal static Recv __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
            {
                if (native == __IntPtr.Zero)
                    return null;
                if (__TryGetNativeToManagedMapping(native, out var managed))
                    return (Recv)managed;
                var result = __CreateInstance(native, skipVTables);
                if (saveInstance)
                    __RecordNativeToManagedMapping(native, result);
                return result;
            }

            internal static Recv __CreateInstance(__Internal native, bool skipVTables = false)
            {
                return new Recv(native, skipVTables);
            }

            private static void* __CopyValue(__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(__Internal));
                *(__Internal*) ret = native;
                return ret.ToPointer();
            }

            private Recv(__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                __RecordNativeToManagedMapping(__Instance, this);
            }

            protected Recv(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new __IntPtr(native);
            }

            public Recv()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Recv.__Internal));
                __ownsNativeInstance = true;
                __RecordNativeToManagedMapping(__Instance, this);
            }

            public Recv(global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Recv _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Recv.__Internal));
                __ownsNativeInstance = true;
                __RecordNativeToManagedMapping(__Instance, this);
                *((global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Recv.__Internal*) __Instance) = *((global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Recv.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            }

            partial void DisposePartial(bool disposing);

            internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
            {
                if (__Instance == IntPtr.Zero)
                    return;
                NativeToManagedMap.TryRemove(__Instance, out _);
                DisposePartial(disposing);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public ulong TotalPackets
            {
                get
                {
                    return ((__Internal*)__Instance)->TotalPackets;
                }

                set
                {
                    ((__Internal*)__Instance)->TotalPackets = value;
                }
            }

            public ulong ReorderedPackets
            {
                get
                {
                    return ((__Internal*)__Instance)->ReorderedPackets;
                }

                set
                {
                    ((__Internal*)__Instance)->ReorderedPackets = value;
                }
            }

            public ulong DroppedPackets
            {
                get
                {
                    return ((__Internal*)__Instance)->DroppedPackets;
                }

                set
                {
                    ((__Internal*)__Instance)->DroppedPackets = value;
                }
            }

            public ulong DuplicatePackets
            {
                get
                {
                    return ((__Internal*)__Instance)->DuplicatePackets;
                }

                set
                {
                    ((__Internal*)__Instance)->DuplicatePackets = value;
                }
            }

            public ulong TotalBytes
            {
                get
                {
                    return ((__Internal*)__Instance)->TotalBytes;
                }

                set
                {
                    ((__Internal*)__Instance)->TotalBytes = value;
                }
            }

            public ulong TotalStreamBytes
            {
                get
                {
                    return ((__Internal*)__Instance)->TotalStreamBytes;
                }

                set
                {
                    ((__Internal*)__Instance)->TotalStreamBytes = value;
                }
            }

            public ulong DecryptionFailures
            {
                get
                {
                    return ((__Internal*)__Instance)->DecryptionFailures;
                }

                set
                {
                    ((__Internal*)__Instance)->DecryptionFailures = value;
                }
            }

            public ulong ValidAckFrames
            {
                get
                {
                    return ((__Internal*)__Instance)->ValidAckFrames;
                }

                set
                {
                    ((__Internal*)__Instance)->ValidAckFrames = value;
                }
            }
        }

        public unsafe partial class Misc : IDisposable
        {
            [StructLayout(LayoutKind.Sequential, Size = 4)]
            public partial struct __Internal
            {
                internal uint KeyUpdateCount;

                [SuppressUnmanagedCodeSecurity, DllImport("MSQuicSSL_Wrapper", EntryPoint = "??0<unnamed-type-Misc>@QUIC_STATISTICS@@QEAA@AEBU01@@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
            }

            public __IntPtr __Instance { get; protected set; }

            internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Misc> NativeToManagedMap =
                new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Misc>();

            internal static void __RecordNativeToManagedMapping(IntPtr native, global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Misc managed)
            {
                NativeToManagedMap[native] = managed;
            }

            internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Misc managed)
            {
    
                return NativeToManagedMap.TryGetValue(native, out managed);
            }

            protected bool __ownsNativeInstance;

            internal static Misc __CreateInstance(__IntPtr native, bool skipVTables = false)
            {
                if (native == __IntPtr.Zero)
                    return null;
                return new Misc(native.ToPointer(), skipVTables);
            }

            internal static Misc __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
            {
                if (native == __IntPtr.Zero)
                    return null;
                if (__TryGetNativeToManagedMapping(native, out var managed))
                    return (Misc)managed;
                var result = __CreateInstance(native, skipVTables);
                if (saveInstance)
                    __RecordNativeToManagedMapping(native, result);
                return result;
            }

            internal static Misc __CreateInstance(__Internal native, bool skipVTables = false)
            {
                return new Misc(native, skipVTables);
            }

            private static void* __CopyValue(__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(__Internal));
                *(__Internal*) ret = native;
                return ret.ToPointer();
            }

            private Misc(__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                __RecordNativeToManagedMapping(__Instance, this);
            }

            protected Misc(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new __IntPtr(native);
            }

            public Misc()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Misc.__Internal));
                __ownsNativeInstance = true;
                __RecordNativeToManagedMapping(__Instance, this);
            }

            public Misc(global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Misc _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Misc.__Internal));
                __ownsNativeInstance = true;
                __RecordNativeToManagedMapping(__Instance, this);
                *((global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Misc.__Internal*) __Instance) = *((global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Misc.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            }

            partial void DisposePartial(bool disposing);

            internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
            {
                if (__Instance == IntPtr.Zero)
                    return;
                NativeToManagedMap.TryRemove(__Instance, out _);
                DisposePartial(disposing);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public uint KeyUpdateCount
            {
                get
                {
                    return ((__Internal*)__Instance)->KeyUpdateCount;
                }

                set
                {
                    ((__Internal*)__Instance)->KeyUpdateCount = value;
                }
            }
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_STATISTICS> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_STATISTICS>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::AKNet.MSQuicWrapper.QUIC_STATISTICS managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::AKNet.MSQuicWrapper.QUIC_STATISTICS managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static QUIC_STATISTICS __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new QUIC_STATISTICS(native.ToPointer(), skipVTables);
        }

        internal static QUIC_STATISTICS __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (QUIC_STATISTICS)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static QUIC_STATISTICS __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new QUIC_STATISTICS(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private QUIC_STATISTICS(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected QUIC_STATISTICS(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public QUIC_STATISTICS()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_STATISTICS.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public QUIC_STATISTICS(global::AKNet.MSQuicWrapper.QUIC_STATISTICS _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_STATISTICS.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::AKNet.MSQuicWrapper.QUIC_STATISTICS.__Internal*) __Instance) = *((global::AKNet.MSQuicWrapper.QUIC_STATISTICS.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ulong CorrelationId
        {
            get
            {
                return ((__Internal*)__Instance)->CorrelationId;
            }

            set
            {
                ((__Internal*)__Instance)->CorrelationId = value;
            }
        }

        public uint VersionNegotiation
        {
            get
            {
                return ((__Internal*)__Instance)->VersionNegotiation;
            }

            set
            {
                ((__Internal*)__Instance)->VersionNegotiation = value;
            }
        }

        public uint StatelessRetry
        {
            get
            {
                return ((__Internal*)__Instance)->StatelessRetry;
            }

            set
            {
                ((__Internal*)__Instance)->StatelessRetry = value;
            }
        }

        public uint ResumptionAttempted
        {
            get
            {
                return ((__Internal*)__Instance)->ResumptionAttempted;
            }

            set
            {
                ((__Internal*)__Instance)->ResumptionAttempted = value;
            }
        }

        public uint ResumptionSucceeded
        {
            get
            {
                return ((__Internal*)__Instance)->ResumptionSucceeded;
            }

            set
            {
                ((__Internal*)__Instance)->ResumptionSucceeded = value;
            }
        }

        public uint Rtt
        {
            get
            {
                return ((__Internal*)__Instance)->Rtt;
            }

            set
            {
                ((__Internal*)__Instance)->Rtt = value;
            }
        }

        public uint MinRtt
        {
            get
            {
                return ((__Internal*)__Instance)->MinRtt;
            }

            set
            {
                ((__Internal*)__Instance)->MinRtt = value;
            }
        }

        public uint MaxRtt
        {
            get
            {
                return ((__Internal*)__Instance)->MaxRtt;
            }

            set
            {
                ((__Internal*)__Instance)->MaxRtt = value;
            }
        }

        public global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Timing timing
        {
            get
            {
                return global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Timing.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Timing));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Timing = *(global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Timing.__Internal*) value.__Instance;
            }
        }

        public global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Handshake handshake
        {
            get
            {
                return global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Handshake.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Handshake));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Handshake = *(global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Handshake.__Internal*) value.__Instance;
            }
        }

        public global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Send send
        {
            get
            {
                return global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Send.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Send));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Send = *(global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Send.__Internal*) value.__Instance;
            }
        }

        public global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Recv recv
        {
            get
            {
                return global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Recv.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Recv));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Recv = *(global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Recv.__Internal*) value.__Instance;
            }
        }

        public global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Misc misc
        {
            get
            {
                return global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Misc.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->Misc));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->Misc = *(global::AKNet.MSQuicWrapper.QUIC_STATISTICS.Misc.__Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class QUIC_STATISTICS_V2 : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 200)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal ulong CorrelationId;

            [FieldOffset(8)]
            internal uint VersionNegotiation;

            [FieldOffset(8)]
            internal uint StatelessRetry;

            [FieldOffset(8)]
            internal uint ResumptionAttempted;

            [FieldOffset(8)]
            internal uint ResumptionSucceeded;

            [FieldOffset(8)]
            internal uint GreaseBitNegotiated;

            [FieldOffset(8)]
            internal uint EcnCapable;

            [FieldOffset(8)]
            internal uint EncryptionOffloaded;

            [FieldOffset(8)]
            internal uint RESERVED;

            [FieldOffset(12)]
            internal uint Rtt;

            [FieldOffset(16)]
            internal uint MinRtt;

            [FieldOffset(20)]
            internal uint MaxRtt;

            [FieldOffset(24)]
            internal ulong TimingStart;

            [FieldOffset(32)]
            internal ulong TimingInitialFlightEnd;

            [FieldOffset(40)]
            internal ulong TimingHandshakeFlightEnd;

            [FieldOffset(48)]
            internal uint HandshakeClientFlight1Bytes;

            [FieldOffset(52)]
            internal uint HandshakeServerFlight1Bytes;

            [FieldOffset(56)]
            internal uint HandshakeClientFlight2Bytes;

            [FieldOffset(60)]
            internal ushort SendPathMtu;

            [FieldOffset(64)]
            internal ulong SendTotalPackets;

            [FieldOffset(72)]
            internal ulong SendRetransmittablePackets;

            [FieldOffset(80)]
            internal ulong SendSuspectedLostPackets;

            [FieldOffset(88)]
            internal ulong SendSpuriousLostPackets;

            [FieldOffset(96)]
            internal ulong SendTotalBytes;

            [FieldOffset(104)]
            internal ulong SendTotalStreamBytes;

            [FieldOffset(112)]
            internal uint SendCongestionCount;

            [FieldOffset(116)]
            internal uint SendPersistentCongestionCount;

            [FieldOffset(120)]
            internal ulong RecvTotalPackets;

            [FieldOffset(128)]
            internal ulong RecvReorderedPackets;

            [FieldOffset(136)]
            internal ulong RecvDroppedPackets;

            [FieldOffset(144)]
            internal ulong RecvDuplicatePackets;

            [FieldOffset(152)]
            internal ulong RecvTotalBytes;

            [FieldOffset(160)]
            internal ulong RecvTotalStreamBytes;

            [FieldOffset(168)]
            internal ulong RecvDecryptionFailures;

            [FieldOffset(176)]
            internal ulong RecvValidAckFrames;

            [FieldOffset(184)]
            internal uint KeyUpdateCount;

            [FieldOffset(188)]
            internal uint SendCongestionWindow;

            [FieldOffset(192)]
            internal uint DestCidUpdateCount;

            [FieldOffset(196)]
            internal uint SendEcnCongestionCount;

            [SuppressUnmanagedCodeSecurity, DllImport("MSQuicSSL_Wrapper", EntryPoint = "??0QUIC_STATISTICS_V2@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_STATISTICS_V2> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_STATISTICS_V2>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::AKNet.MSQuicWrapper.QUIC_STATISTICS_V2 managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::AKNet.MSQuicWrapper.QUIC_STATISTICS_V2 managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static QUIC_STATISTICS_V2 __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new QUIC_STATISTICS_V2(native.ToPointer(), skipVTables);
        }

        internal static QUIC_STATISTICS_V2 __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (QUIC_STATISTICS_V2)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static QUIC_STATISTICS_V2 __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new QUIC_STATISTICS_V2(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private QUIC_STATISTICS_V2(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected QUIC_STATISTICS_V2(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public QUIC_STATISTICS_V2()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_STATISTICS_V2.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public QUIC_STATISTICS_V2(global::AKNet.MSQuicWrapper.QUIC_STATISTICS_V2 _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_STATISTICS_V2.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::AKNet.MSQuicWrapper.QUIC_STATISTICS_V2.__Internal*) __Instance) = *((global::AKNet.MSQuicWrapper.QUIC_STATISTICS_V2.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ulong CorrelationId
        {
            get
            {
                return ((__Internal*)__Instance)->CorrelationId;
            }

            set
            {
                ((__Internal*)__Instance)->CorrelationId = value;
            }
        }

        public uint VersionNegotiation
        {
            get
            {
                return ((__Internal*)__Instance)->VersionNegotiation;
            }

            set
            {
                ((__Internal*)__Instance)->VersionNegotiation = value;
            }
        }

        public uint StatelessRetry
        {
            get
            {
                return ((__Internal*)__Instance)->StatelessRetry;
            }

            set
            {
                ((__Internal*)__Instance)->StatelessRetry = value;
            }
        }

        public uint ResumptionAttempted
        {
            get
            {
                return ((__Internal*)__Instance)->ResumptionAttempted;
            }

            set
            {
                ((__Internal*)__Instance)->ResumptionAttempted = value;
            }
        }

        public uint ResumptionSucceeded
        {
            get
            {
                return ((__Internal*)__Instance)->ResumptionSucceeded;
            }

            set
            {
                ((__Internal*)__Instance)->ResumptionSucceeded = value;
            }
        }

        public uint GreaseBitNegotiated
        {
            get
            {
                return ((__Internal*)__Instance)->GreaseBitNegotiated;
            }

            set
            {
                ((__Internal*)__Instance)->GreaseBitNegotiated = value;
            }
        }

        public uint EcnCapable
        {
            get
            {
                return ((__Internal*)__Instance)->EcnCapable;
            }

            set
            {
                ((__Internal*)__Instance)->EcnCapable = value;
            }
        }

        public uint EncryptionOffloaded
        {
            get
            {
                return ((__Internal*)__Instance)->EncryptionOffloaded;
            }

            set
            {
                ((__Internal*)__Instance)->EncryptionOffloaded = value;
            }
        }

        public uint RESERVED
        {
            get
            {
                return ((__Internal*)__Instance)->RESERVED;
            }

            set
            {
                ((__Internal*)__Instance)->RESERVED = value;
            }
        }

        public uint Rtt
        {
            get
            {
                return ((__Internal*)__Instance)->Rtt;
            }

            set
            {
                ((__Internal*)__Instance)->Rtt = value;
            }
        }

        public uint MinRtt
        {
            get
            {
                return ((__Internal*)__Instance)->MinRtt;
            }

            set
            {
                ((__Internal*)__Instance)->MinRtt = value;
            }
        }

        public uint MaxRtt
        {
            get
            {
                return ((__Internal*)__Instance)->MaxRtt;
            }

            set
            {
                ((__Internal*)__Instance)->MaxRtt = value;
            }
        }

        public ulong TimingStart
        {
            get
            {
                return ((__Internal*)__Instance)->TimingStart;
            }

            set
            {
                ((__Internal*)__Instance)->TimingStart = value;
            }
        }

        public ulong TimingInitialFlightEnd
        {
            get
            {
                return ((__Internal*)__Instance)->TimingInitialFlightEnd;
            }

            set
            {
                ((__Internal*)__Instance)->TimingInitialFlightEnd = value;
            }
        }

        public ulong TimingHandshakeFlightEnd
        {
            get
            {
                return ((__Internal*)__Instance)->TimingHandshakeFlightEnd;
            }

            set
            {
                ((__Internal*)__Instance)->TimingHandshakeFlightEnd = value;
            }
        }

        public uint HandshakeClientFlight1Bytes
        {
            get
            {
                return ((__Internal*)__Instance)->HandshakeClientFlight1Bytes;
            }

            set
            {
                ((__Internal*)__Instance)->HandshakeClientFlight1Bytes = value;
            }
        }

        public uint HandshakeServerFlight1Bytes
        {
            get
            {
                return ((__Internal*)__Instance)->HandshakeServerFlight1Bytes;
            }

            set
            {
                ((__Internal*)__Instance)->HandshakeServerFlight1Bytes = value;
            }
        }

        public uint HandshakeClientFlight2Bytes
        {
            get
            {
                return ((__Internal*)__Instance)->HandshakeClientFlight2Bytes;
            }

            set
            {
                ((__Internal*)__Instance)->HandshakeClientFlight2Bytes = value;
            }
        }

        public ushort SendPathMtu
        {
            get
            {
                return ((__Internal*)__Instance)->SendPathMtu;
            }

            set
            {
                ((__Internal*)__Instance)->SendPathMtu = value;
            }
        }

        public ulong SendTotalPackets
        {
            get
            {
                return ((__Internal*)__Instance)->SendTotalPackets;
            }

            set
            {
                ((__Internal*)__Instance)->SendTotalPackets = value;
            }
        }

        public ulong SendRetransmittablePackets
        {
            get
            {
                return ((__Internal*)__Instance)->SendRetransmittablePackets;
            }

            set
            {
                ((__Internal*)__Instance)->SendRetransmittablePackets = value;
            }
        }

        public ulong SendSuspectedLostPackets
        {
            get
            {
                return ((__Internal*)__Instance)->SendSuspectedLostPackets;
            }

            set
            {
                ((__Internal*)__Instance)->SendSuspectedLostPackets = value;
            }
        }

        public ulong SendSpuriousLostPackets
        {
            get
            {
                return ((__Internal*)__Instance)->SendSpuriousLostPackets;
            }

            set
            {
                ((__Internal*)__Instance)->SendSpuriousLostPackets = value;
            }
        }

        public ulong SendTotalBytes
        {
            get
            {
                return ((__Internal*)__Instance)->SendTotalBytes;
            }

            set
            {
                ((__Internal*)__Instance)->SendTotalBytes = value;
            }
        }

        public ulong SendTotalStreamBytes
        {
            get
            {
                return ((__Internal*)__Instance)->SendTotalStreamBytes;
            }

            set
            {
                ((__Internal*)__Instance)->SendTotalStreamBytes = value;
            }
        }

        public uint SendCongestionCount
        {
            get
            {
                return ((__Internal*)__Instance)->SendCongestionCount;
            }

            set
            {
                ((__Internal*)__Instance)->SendCongestionCount = value;
            }
        }

        public uint SendPersistentCongestionCount
        {
            get
            {
                return ((__Internal*)__Instance)->SendPersistentCongestionCount;
            }

            set
            {
                ((__Internal*)__Instance)->SendPersistentCongestionCount = value;
            }
        }

        public ulong RecvTotalPackets
        {
            get
            {
                return ((__Internal*)__Instance)->RecvTotalPackets;
            }

            set
            {
                ((__Internal*)__Instance)->RecvTotalPackets = value;
            }
        }

        public ulong RecvReorderedPackets
        {
            get
            {
                return ((__Internal*)__Instance)->RecvReorderedPackets;
            }

            set
            {
                ((__Internal*)__Instance)->RecvReorderedPackets = value;
            }
        }

        public ulong RecvDroppedPackets
        {
            get
            {
                return ((__Internal*)__Instance)->RecvDroppedPackets;
            }

            set
            {
                ((__Internal*)__Instance)->RecvDroppedPackets = value;
            }
        }

        public ulong RecvDuplicatePackets
        {
            get
            {
                return ((__Internal*)__Instance)->RecvDuplicatePackets;
            }

            set
            {
                ((__Internal*)__Instance)->RecvDuplicatePackets = value;
            }
        }

        public ulong RecvTotalBytes
        {
            get
            {
                return ((__Internal*)__Instance)->RecvTotalBytes;
            }

            set
            {
                ((__Internal*)__Instance)->RecvTotalBytes = value;
            }
        }

        public ulong RecvTotalStreamBytes
        {
            get
            {
                return ((__Internal*)__Instance)->RecvTotalStreamBytes;
            }

            set
            {
                ((__Internal*)__Instance)->RecvTotalStreamBytes = value;
            }
        }

        public ulong RecvDecryptionFailures
        {
            get
            {
                return ((__Internal*)__Instance)->RecvDecryptionFailures;
            }

            set
            {
                ((__Internal*)__Instance)->RecvDecryptionFailures = value;
            }
        }

        public ulong RecvValidAckFrames
        {
            get
            {
                return ((__Internal*)__Instance)->RecvValidAckFrames;
            }

            set
            {
                ((__Internal*)__Instance)->RecvValidAckFrames = value;
            }
        }

        public uint KeyUpdateCount
        {
            get
            {
                return ((__Internal*)__Instance)->KeyUpdateCount;
            }

            set
            {
                ((__Internal*)__Instance)->KeyUpdateCount = value;
            }
        }

        public uint SendCongestionWindow
        {
            get
            {
                return ((__Internal*)__Instance)->SendCongestionWindow;
            }

            set
            {
                ((__Internal*)__Instance)->SendCongestionWindow = value;
            }
        }

        public uint DestCidUpdateCount
        {
            get
            {
                return ((__Internal*)__Instance)->DestCidUpdateCount;
            }

            set
            {
                ((__Internal*)__Instance)->DestCidUpdateCount = value;
            }
        }

        public uint SendEcnCongestionCount
        {
            get
            {
                return ((__Internal*)__Instance)->SendEcnCongestionCount;
            }

            set
            {
                ((__Internal*)__Instance)->SendEcnCongestionCount = value;
            }
        }
    }

    public unsafe partial class QUIC_LISTENER_STATISTICS : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 24)]
        public partial struct __Internal
        {
            internal ulong TotalAcceptedConnections;
            internal ulong TotalRejectedConnections;
            internal ulong BindingRecvDroppedPackets;

            [SuppressUnmanagedCodeSecurity, DllImport("MSQuicSSL_Wrapper", EntryPoint = "??0QUIC_LISTENER_STATISTICS@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_LISTENER_STATISTICS> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_LISTENER_STATISTICS>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::AKNet.MSQuicWrapper.QUIC_LISTENER_STATISTICS managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::AKNet.MSQuicWrapper.QUIC_LISTENER_STATISTICS managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static QUIC_LISTENER_STATISTICS __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new QUIC_LISTENER_STATISTICS(native.ToPointer(), skipVTables);
        }

        internal static QUIC_LISTENER_STATISTICS __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (QUIC_LISTENER_STATISTICS)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static QUIC_LISTENER_STATISTICS __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new QUIC_LISTENER_STATISTICS(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private QUIC_LISTENER_STATISTICS(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected QUIC_LISTENER_STATISTICS(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public QUIC_LISTENER_STATISTICS()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_LISTENER_STATISTICS.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public QUIC_LISTENER_STATISTICS(global::AKNet.MSQuicWrapper.QUIC_LISTENER_STATISTICS _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_LISTENER_STATISTICS.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::AKNet.MSQuicWrapper.QUIC_LISTENER_STATISTICS.__Internal*) __Instance) = *((global::AKNet.MSQuicWrapper.QUIC_LISTENER_STATISTICS.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ulong TotalAcceptedConnections
        {
            get
            {
                return ((__Internal*)__Instance)->TotalAcceptedConnections;
            }

            set
            {
                ((__Internal*)__Instance)->TotalAcceptedConnections = value;
            }
        }

        public ulong TotalRejectedConnections
        {
            get
            {
                return ((__Internal*)__Instance)->TotalRejectedConnections;
            }

            set
            {
                ((__Internal*)__Instance)->TotalRejectedConnections = value;
            }
        }

        public ulong BindingRecvDroppedPackets
        {
            get
            {
                return ((__Internal*)__Instance)->BindingRecvDroppedPackets;
            }

            set
            {
                ((__Internal*)__Instance)->BindingRecvDroppedPackets = value;
            }
        }
    }

    public unsafe partial class QUIC_GLOBAL_SETTINGS : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal ulong IsSetFlags;

            [FieldOffset(0)]
            internal global::AKNet.MSQuicWrapper.QUIC_GLOBAL_SETTINGS._0.IsSet.__Internal IsSet;

            [FieldOffset(8)]
            internal ushort RetryMemoryLimit;

            [FieldOffset(10)]
            internal ushort LoadBalancingMode;

            [FieldOffset(12)]
            internal uint FixedServerID;

            [SuppressUnmanagedCodeSecurity, DllImport("MSQuicSSL_Wrapper", EntryPoint = "??0QUIC_GLOBAL_SETTINGS@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public unsafe partial struct _0
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal ulong IsSetFlags;

                [FieldOffset(0)]
                internal global::AKNet.MSQuicWrapper.QUIC_GLOBAL_SETTINGS._0.IsSet.__Internal IsSet;
            }

            public unsafe partial class IsSet
            {
                [StructLayout(LayoutKind.Explicit, Size = 8)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    internal ulong RetryMemoryLimit;

                    [FieldOffset(0)]
                    internal ulong LoadBalancingMode;

                    [FieldOffset(0)]
                    internal ulong FixedServerID;

                    [FieldOffset(0)]
                    internal ulong RESERVED;
                }
            }
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_GLOBAL_SETTINGS> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_GLOBAL_SETTINGS>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::AKNet.MSQuicWrapper.QUIC_GLOBAL_SETTINGS managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::AKNet.MSQuicWrapper.QUIC_GLOBAL_SETTINGS managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static QUIC_GLOBAL_SETTINGS __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new QUIC_GLOBAL_SETTINGS(native.ToPointer(), skipVTables);
        }

        internal static QUIC_GLOBAL_SETTINGS __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (QUIC_GLOBAL_SETTINGS)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static QUIC_GLOBAL_SETTINGS __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new QUIC_GLOBAL_SETTINGS(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private QUIC_GLOBAL_SETTINGS(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected QUIC_GLOBAL_SETTINGS(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public QUIC_GLOBAL_SETTINGS()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_GLOBAL_SETTINGS.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public QUIC_GLOBAL_SETTINGS(global::AKNet.MSQuicWrapper.QUIC_GLOBAL_SETTINGS _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_GLOBAL_SETTINGS.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::AKNet.MSQuicWrapper.QUIC_GLOBAL_SETTINGS.__Internal*) __Instance) = *((global::AKNet.MSQuicWrapper.QUIC_GLOBAL_SETTINGS.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ulong IsSetFlags
        {
            get
            {
                return ((__Internal*)__Instance)->IsSetFlags;
            }

            set
            {
                ((__Internal*)__Instance)->IsSetFlags = value;
            }
        }

        public ushort RetryMemoryLimit
        {
            get
            {
                return ((__Internal*)__Instance)->RetryMemoryLimit;
            }

            set
            {
                ((__Internal*)__Instance)->RetryMemoryLimit = value;
            }
        }

        public ushort LoadBalancingMode
        {
            get
            {
                return ((__Internal*)__Instance)->LoadBalancingMode;
            }

            set
            {
                ((__Internal*)__Instance)->LoadBalancingMode = value;
            }
        }

        public uint FixedServerID
        {
            get
            {
                return ((__Internal*)__Instance)->FixedServerID;
            }

            set
            {
                ((__Internal*)__Instance)->FixedServerID = value;
            }
        }
    }

    public unsafe partial class QUIC_SETTINGS : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 144)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal ulong IsSetFlags;

            [FieldOffset(0)]
            internal global::AKNet.MSQuicWrapper.QUIC_SETTINGS._0.IsSet.__Internal IsSet;

            [FieldOffset(8)]
            internal ulong MaxBytesPerKey;

            [FieldOffset(16)]
            internal ulong HandshakeIdleTimeoutMs;

            [FieldOffset(24)]
            internal ulong IdleTimeoutMs;

            [FieldOffset(32)]
            internal ulong MtuDiscoverySearchCompleteTimeoutUs;

            [FieldOffset(40)]
            internal uint TlsClientMaxSendBuffer;

            [FieldOffset(44)]
            internal uint TlsServerMaxSendBuffer;

            [FieldOffset(48)]
            internal uint StreamRecvWindowDefault;

            [FieldOffset(52)]
            internal uint StreamRecvBufferDefault;

            [FieldOffset(56)]
            internal uint ConnFlowControlWindow;

            [FieldOffset(60)]
            internal uint MaxWorkerQueueDelayUs;

            [FieldOffset(64)]
            internal uint MaxStatelessOperations;

            [FieldOffset(68)]
            internal uint InitialWindowPackets;

            [FieldOffset(72)]
            internal uint SendIdleTimeoutMs;

            [FieldOffset(76)]
            internal uint InitialRttMs;

            [FieldOffset(80)]
            internal uint MaxAckDelayMs;

            [FieldOffset(84)]
            internal uint DisconnectTimeoutMs;

            [FieldOffset(88)]
            internal uint KeepAliveIntervalMs;

            [FieldOffset(92)]
            internal ushort CongestionControlAlgorithm;

            [FieldOffset(94)]
            internal ushort PeerBidiStreamCount;

            [FieldOffset(96)]
            internal ushort PeerUnidiStreamCount;

            [FieldOffset(98)]
            internal ushort MaxBindingStatelessOperations;

            [FieldOffset(100)]
            internal ushort StatelessOperationExpirationMs;

            [FieldOffset(102)]
            internal ushort MinimumMtu;

            [FieldOffset(104)]
            internal ushort MaximumMtu;

            [FieldOffset(106)]
            internal byte SendBufferingEnabled;

            [FieldOffset(106)]
            internal byte PacingEnabled;

            [FieldOffset(106)]
            internal byte MigrationEnabled;

            [FieldOffset(106)]
            internal byte DatagramReceiveEnabled;

            [FieldOffset(106)]
            internal byte ServerResumptionLevel;

            [FieldOffset(106)]
            internal byte GreaseQuicBitEnabled;

            [FieldOffset(106)]
            internal byte EcnEnabled;

            [FieldOffset(107)]
            internal byte MaxOperationsPerDrain;

            [FieldOffset(108)]
            internal byte MtuDiscoveryMissingProbeCount;

            [FieldOffset(112)]
            internal uint DestCidUpdateIdleTimeoutMs;

            [FieldOffset(120)]
            internal ulong IsSetFlags1;

            [FieldOffset(120)]
            internal global::AKNet.MSQuicWrapper.QUIC_SETTINGS._0.IsSet.__Internal IsSet1;

            [FieldOffset(128)]
            internal uint StreamRecvWindowBidiLocalDefault;

            [FieldOffset(132)]
            internal uint StreamRecvWindowBidiRemoteDefault;

            [FieldOffset(136)]
            internal uint StreamRecvWindowUnidiDefault;

            [SuppressUnmanagedCodeSecurity, DllImport("MSQuicSSL_Wrapper", EntryPoint = "??0QUIC_SETTINGS@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public unsafe partial struct _0
        {
            [StructLayout(LayoutKind.Explicit, Size = 8)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal ulong IsSetFlags;

                [FieldOffset(0)]
                internal global::AKNet.MSQuicWrapper.QUIC_SETTINGS._0.IsSet.__Internal IsSet;
            }

            public unsafe partial class IsSet
            {
                [StructLayout(LayoutKind.Explicit, Size = 8)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    internal ulong MaxBytesPerKey;

                    [FieldOffset(0)]
                    internal ulong HandshakeIdleTimeoutMs;

                    [FieldOffset(0)]
                    internal ulong IdleTimeoutMs;

                    [FieldOffset(0)]
                    internal ulong MtuDiscoverySearchCompleteTimeoutUs;

                    [FieldOffset(0)]
                    internal ulong TlsClientMaxSendBuffer;

                    [FieldOffset(0)]
                    internal ulong TlsServerMaxSendBuffer;

                    [FieldOffset(0)]
                    internal ulong StreamRecvWindowDefault;

                    [FieldOffset(0)]
                    internal ulong StreamRecvBufferDefault;

                    [FieldOffset(1)]
                    internal ulong ConnFlowControlWindow;

                    [FieldOffset(1)]
                    internal ulong MaxWorkerQueueDelayUs;

                    [FieldOffset(1)]
                    internal ulong MaxStatelessOperations;

                    [FieldOffset(1)]
                    internal ulong InitialWindowPackets;

                    [FieldOffset(1)]
                    internal ulong SendIdleTimeoutMs;

                    [FieldOffset(1)]
                    internal ulong InitialRttMs;

                    [FieldOffset(1)]
                    internal ulong MaxAckDelayMs;

                    [FieldOffset(1)]
                    internal ulong DisconnectTimeoutMs;

                    [FieldOffset(2)]
                    internal ulong KeepAliveIntervalMs;

                    [FieldOffset(2)]
                    internal ulong CongestionControlAlgorithm;

                    [FieldOffset(2)]
                    internal ulong PeerBidiStreamCount;

                    [FieldOffset(2)]
                    internal ulong PeerUnidiStreamCount;

                    [FieldOffset(2)]
                    internal ulong MaxBindingStatelessOperations;

                    [FieldOffset(2)]
                    internal ulong StatelessOperationExpirationMs;

                    [FieldOffset(2)]
                    internal ulong MinimumMtu;

                    [FieldOffset(2)]
                    internal ulong MaximumMtu;

                    [FieldOffset(3)]
                    internal ulong SendBufferingEnabled;

                    [FieldOffset(3)]
                    internal ulong PacingEnabled;

                    [FieldOffset(3)]
                    internal ulong MigrationEnabled;

                    [FieldOffset(3)]
                    internal ulong DatagramReceiveEnabled;

                    [FieldOffset(3)]
                    internal ulong ServerResumptionLevel;

                    [FieldOffset(3)]
                    internal ulong MaxOperationsPerDrain;

                    [FieldOffset(3)]
                    internal ulong MtuDiscoveryMissingProbeCount;

                    [FieldOffset(3)]
                    internal ulong DestCidUpdateIdleTimeoutMs;

                    [FieldOffset(4)]
                    internal ulong GreaseQuicBitEnabled;

                    [FieldOffset(4)]
                    internal ulong EcnEnabled;

                    [FieldOffset(4)]
                    internal ulong HyStartEnabled;

                    [FieldOffset(4)]
                    internal ulong StreamRecvWindowBidiLocalDefault;

                    [FieldOffset(4)]
                    internal ulong StreamRecvWindowBidiRemoteDefault;

                    [FieldOffset(4)]
                    internal ulong StreamRecvWindowUnidiDefault;

                    [FieldOffset(4)]
                    internal ulong RESERVED;
                }
            }
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_SETTINGS> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_SETTINGS>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::AKNet.MSQuicWrapper.QUIC_SETTINGS managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::AKNet.MSQuicWrapper.QUIC_SETTINGS managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static QUIC_SETTINGS __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new QUIC_SETTINGS(native.ToPointer(), skipVTables);
        }

        internal static QUIC_SETTINGS __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (QUIC_SETTINGS)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static QUIC_SETTINGS __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new QUIC_SETTINGS(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private QUIC_SETTINGS(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected QUIC_SETTINGS(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public QUIC_SETTINGS()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_SETTINGS.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public QUIC_SETTINGS(global::AKNet.MSQuicWrapper.QUIC_SETTINGS _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_SETTINGS.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::AKNet.MSQuicWrapper.QUIC_SETTINGS.__Internal*) __Instance) = *((global::AKNet.MSQuicWrapper.QUIC_SETTINGS.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ulong IsSetFlags
        {
            get
            {
                return ((__Internal*)__Instance)->IsSetFlags;
            }

            set
            {
                ((__Internal*)__Instance)->IsSetFlags = value;
            }
        }

        public ulong MaxBytesPerKey
        {
            get
            {
                return ((__Internal*)__Instance)->MaxBytesPerKey;
            }

            set
            {
                ((__Internal*)__Instance)->MaxBytesPerKey = value;
            }
        }

        public ulong HandshakeIdleTimeoutMs
        {
            get
            {
                return ((__Internal*)__Instance)->HandshakeIdleTimeoutMs;
            }

            set
            {
                ((__Internal*)__Instance)->HandshakeIdleTimeoutMs = value;
            }
        }

        public ulong IdleTimeoutMs
        {
            get
            {
                return ((__Internal*)__Instance)->IdleTimeoutMs;
            }

            set
            {
                ((__Internal*)__Instance)->IdleTimeoutMs = value;
            }
        }

        public ulong MtuDiscoverySearchCompleteTimeoutUs
        {
            get
            {
                return ((__Internal*)__Instance)->MtuDiscoverySearchCompleteTimeoutUs;
            }

            set
            {
                ((__Internal*)__Instance)->MtuDiscoverySearchCompleteTimeoutUs = value;
            }
        }

        public uint TlsClientMaxSendBuffer
        {
            get
            {
                return ((__Internal*)__Instance)->TlsClientMaxSendBuffer;
            }

            set
            {
                ((__Internal*)__Instance)->TlsClientMaxSendBuffer = value;
            }
        }

        public uint TlsServerMaxSendBuffer
        {
            get
            {
                return ((__Internal*)__Instance)->TlsServerMaxSendBuffer;
            }

            set
            {
                ((__Internal*)__Instance)->TlsServerMaxSendBuffer = value;
            }
        }

        public uint StreamRecvWindowDefault
        {
            get
            {
                return ((__Internal*)__Instance)->StreamRecvWindowDefault;
            }

            set
            {
                ((__Internal*)__Instance)->StreamRecvWindowDefault = value;
            }
        }

        public uint StreamRecvBufferDefault
        {
            get
            {
                return ((__Internal*)__Instance)->StreamRecvBufferDefault;
            }

            set
            {
                ((__Internal*)__Instance)->StreamRecvBufferDefault = value;
            }
        }

        public uint ConnFlowControlWindow
        {
            get
            {
                return ((__Internal*)__Instance)->ConnFlowControlWindow;
            }

            set
            {
                ((__Internal*)__Instance)->ConnFlowControlWindow = value;
            }
        }

        public uint MaxWorkerQueueDelayUs
        {
            get
            {
                return ((__Internal*)__Instance)->MaxWorkerQueueDelayUs;
            }

            set
            {
                ((__Internal*)__Instance)->MaxWorkerQueueDelayUs = value;
            }
        }

        public uint MaxStatelessOperations
        {
            get
            {
                return ((__Internal*)__Instance)->MaxStatelessOperations;
            }

            set
            {
                ((__Internal*)__Instance)->MaxStatelessOperations = value;
            }
        }

        public uint InitialWindowPackets
        {
            get
            {
                return ((__Internal*)__Instance)->InitialWindowPackets;
            }

            set
            {
                ((__Internal*)__Instance)->InitialWindowPackets = value;
            }
        }

        public uint SendIdleTimeoutMs
        {
            get
            {
                return ((__Internal*)__Instance)->SendIdleTimeoutMs;
            }

            set
            {
                ((__Internal*)__Instance)->SendIdleTimeoutMs = value;
            }
        }

        public uint InitialRttMs
        {
            get
            {
                return ((__Internal*)__Instance)->InitialRttMs;
            }

            set
            {
                ((__Internal*)__Instance)->InitialRttMs = value;
            }
        }

        public uint MaxAckDelayMs
        {
            get
            {
                return ((__Internal*)__Instance)->MaxAckDelayMs;
            }

            set
            {
                ((__Internal*)__Instance)->MaxAckDelayMs = value;
            }
        }

        public uint DisconnectTimeoutMs
        {
            get
            {
                return ((__Internal*)__Instance)->DisconnectTimeoutMs;
            }

            set
            {
                ((__Internal*)__Instance)->DisconnectTimeoutMs = value;
            }
        }

        public uint KeepAliveIntervalMs
        {
            get
            {
                return ((__Internal*)__Instance)->KeepAliveIntervalMs;
            }

            set
            {
                ((__Internal*)__Instance)->KeepAliveIntervalMs = value;
            }
        }

        public ushort CongestionControlAlgorithm
        {
            get
            {
                return ((__Internal*)__Instance)->CongestionControlAlgorithm;
            }

            set
            {
                ((__Internal*)__Instance)->CongestionControlAlgorithm = value;
            }
        }

        public ushort PeerBidiStreamCount
        {
            get
            {
                return ((__Internal*)__Instance)->PeerBidiStreamCount;
            }

            set
            {
                ((__Internal*)__Instance)->PeerBidiStreamCount = value;
            }
        }

        public ushort PeerUnidiStreamCount
        {
            get
            {
                return ((__Internal*)__Instance)->PeerUnidiStreamCount;
            }

            set
            {
                ((__Internal*)__Instance)->PeerUnidiStreamCount = value;
            }
        }

        public ushort MaxBindingStatelessOperations
        {
            get
            {
                return ((__Internal*)__Instance)->MaxBindingStatelessOperations;
            }

            set
            {
                ((__Internal*)__Instance)->MaxBindingStatelessOperations = value;
            }
        }

        public ushort StatelessOperationExpirationMs
        {
            get
            {
                return ((__Internal*)__Instance)->StatelessOperationExpirationMs;
            }

            set
            {
                ((__Internal*)__Instance)->StatelessOperationExpirationMs = value;
            }
        }

        public ushort MinimumMtu
        {
            get
            {
                return ((__Internal*)__Instance)->MinimumMtu;
            }

            set
            {
                ((__Internal*)__Instance)->MinimumMtu = value;
            }
        }

        public ushort MaximumMtu
        {
            get
            {
                return ((__Internal*)__Instance)->MaximumMtu;
            }

            set
            {
                ((__Internal*)__Instance)->MaximumMtu = value;
            }
        }

        public byte SendBufferingEnabled
        {
            get
            {
                return ((__Internal*)__Instance)->SendBufferingEnabled;
            }

            set
            {
                ((__Internal*)__Instance)->SendBufferingEnabled = value;
            }
        }

        public byte PacingEnabled
        {
            get
            {
                return ((__Internal*)__Instance)->PacingEnabled;
            }

            set
            {
                ((__Internal*)__Instance)->PacingEnabled = value;
            }
        }

        public byte MigrationEnabled
        {
            get
            {
                return ((__Internal*)__Instance)->MigrationEnabled;
            }

            set
            {
                ((__Internal*)__Instance)->MigrationEnabled = value;
            }
        }

        public byte DatagramReceiveEnabled
        {
            get
            {
                return ((__Internal*)__Instance)->DatagramReceiveEnabled;
            }

            set
            {
                ((__Internal*)__Instance)->DatagramReceiveEnabled = value;
            }
        }

        public byte ServerResumptionLevel
        {
            get
            {
                return ((__Internal*)__Instance)->ServerResumptionLevel;
            }

            set
            {
                ((__Internal*)__Instance)->ServerResumptionLevel = value;
            }
        }

        public byte GreaseQuicBitEnabled
        {
            get
            {
                return ((__Internal*)__Instance)->GreaseQuicBitEnabled;
            }

            set
            {
                ((__Internal*)__Instance)->GreaseQuicBitEnabled = value;
            }
        }

        public byte EcnEnabled
        {
            get
            {
                return ((__Internal*)__Instance)->EcnEnabled;
            }

            set
            {
                ((__Internal*)__Instance)->EcnEnabled = value;
            }
        }

        public byte MaxOperationsPerDrain
        {
            get
            {
                return ((__Internal*)__Instance)->MaxOperationsPerDrain;
            }

            set
            {
                ((__Internal*)__Instance)->MaxOperationsPerDrain = value;
            }
        }

        public byte MtuDiscoveryMissingProbeCount
        {
            get
            {
                return ((__Internal*)__Instance)->MtuDiscoveryMissingProbeCount;
            }

            set
            {
                ((__Internal*)__Instance)->MtuDiscoveryMissingProbeCount = value;
            }
        }

        public uint DestCidUpdateIdleTimeoutMs
        {
            get
            {
                return ((__Internal*)__Instance)->DestCidUpdateIdleTimeoutMs;
            }

            set
            {
                ((__Internal*)__Instance)->DestCidUpdateIdleTimeoutMs = value;
            }
        }

        public uint StreamRecvWindowBidiLocalDefault
        {
            get
            {
                return ((__Internal*)__Instance)->StreamRecvWindowBidiLocalDefault;
            }

            set
            {
                ((__Internal*)__Instance)->StreamRecvWindowBidiLocalDefault = value;
            }
        }

        public uint StreamRecvWindowBidiRemoteDefault
        {
            get
            {
                return ((__Internal*)__Instance)->StreamRecvWindowBidiRemoteDefault;
            }

            set
            {
                ((__Internal*)__Instance)->StreamRecvWindowBidiRemoteDefault = value;
            }
        }

        public uint StreamRecvWindowUnidiDefault
        {
            get
            {
                return ((__Internal*)__Instance)->StreamRecvWindowUnidiDefault;
            }

            set
            {
                ((__Internal*)__Instance)->StreamRecvWindowUnidiDefault = value;
            }
        }
    }

    public unsafe partial class QUIC_TLS_SECRETS : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 354)]
        public partial struct __Internal
        {
            internal byte SecretLength;
            internal global::AKNet.MSQuicWrapper.QUIC_TLS_SECRETS.IsSet.__Internal IsSet;
            internal fixed byte ClientRandom[32];
            internal fixed byte ClientEarlyTrafficSecret[64];
            internal fixed byte ClientHandshakeTrafficSecret[64];
            internal fixed byte ServerHandshakeTrafficSecret[64];
            internal fixed byte ClientTrafficSecret0[64];
            internal fixed byte ServerTrafficSecret0[64];

            [SuppressUnmanagedCodeSecurity, DllImport("MSQuicSSL_Wrapper", EntryPoint = "??0QUIC_TLS_SECRETS@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public unsafe partial class IsSet : IDisposable
        {
            [StructLayout(LayoutKind.Explicit, Size = 1)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal byte ClientRandom;

                [FieldOffset(0)]
                internal byte ClientEarlyTrafficSecret;

                [FieldOffset(0)]
                internal byte ClientHandshakeTrafficSecret;

                [FieldOffset(0)]
                internal byte ServerHandshakeTrafficSecret;

                [FieldOffset(0)]
                internal byte ClientTrafficSecret0;

                [FieldOffset(0)]
                internal byte ServerTrafficSecret0;

                [SuppressUnmanagedCodeSecurity, DllImport("MSQuicSSL_Wrapper", EntryPoint = "??0<unnamed-type-IsSet>@QUIC_TLS_SECRETS@@QEAA@AEBU01@@Z", CallingConvention = __CallingConvention.Cdecl)]
                internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
            }

            public __IntPtr __Instance { get; protected set; }

            internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_TLS_SECRETS.IsSet> NativeToManagedMap =
                new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_TLS_SECRETS.IsSet>();

            internal static void __RecordNativeToManagedMapping(IntPtr native, global::AKNet.MSQuicWrapper.QUIC_TLS_SECRETS.IsSet managed)
            {
                NativeToManagedMap[native] = managed;
            }

            internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::AKNet.MSQuicWrapper.QUIC_TLS_SECRETS.IsSet managed)
            {
    
                return NativeToManagedMap.TryGetValue(native, out managed);
            }

            protected bool __ownsNativeInstance;

            internal static IsSet __CreateInstance(__IntPtr native, bool skipVTables = false)
            {
                if (native == __IntPtr.Zero)
                    return null;
                return new IsSet(native.ToPointer(), skipVTables);
            }

            internal static IsSet __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
            {
                if (native == __IntPtr.Zero)
                    return null;
                if (__TryGetNativeToManagedMapping(native, out var managed))
                    return (IsSet)managed;
                var result = __CreateInstance(native, skipVTables);
                if (saveInstance)
                    __RecordNativeToManagedMapping(native, result);
                return result;
            }

            internal static IsSet __CreateInstance(__Internal native, bool skipVTables = false)
            {
                return new IsSet(native, skipVTables);
            }

            private static void* __CopyValue(__Internal native)
            {
                var ret = Marshal.AllocHGlobal(sizeof(__Internal));
                *(__Internal*) ret = native;
                return ret.ToPointer();
            }

            private IsSet(__Internal native, bool skipVTables = false)
                : this(__CopyValue(native), skipVTables)
            {
                __ownsNativeInstance = true;
                __RecordNativeToManagedMapping(__Instance, this);
            }

            protected IsSet(void* native, bool skipVTables = false)
            {
                if (native == null)
                    return;
                __Instance = new __IntPtr(native);
            }

            public IsSet()
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_TLS_SECRETS.IsSet.__Internal));
                __ownsNativeInstance = true;
                __RecordNativeToManagedMapping(__Instance, this);
            }

            public IsSet(global::AKNet.MSQuicWrapper.QUIC_TLS_SECRETS.IsSet _0)
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_TLS_SECRETS.IsSet.__Internal));
                __ownsNativeInstance = true;
                __RecordNativeToManagedMapping(__Instance, this);
                *((global::AKNet.MSQuicWrapper.QUIC_TLS_SECRETS.IsSet.__Internal*) __Instance) = *((global::AKNet.MSQuicWrapper.QUIC_TLS_SECRETS.IsSet.__Internal*) _0.__Instance);
            }

            public void Dispose()
            {
                Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
            }

            partial void DisposePartial(bool disposing);

            internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
            {
                if (__Instance == IntPtr.Zero)
                    return;
                NativeToManagedMap.TryRemove(__Instance, out _);
                DisposePartial(disposing);
                if (__ownsNativeInstance)
                    Marshal.FreeHGlobal(__Instance);
                __Instance = IntPtr.Zero;
            }

            public byte ClientRandom
            {
                get
                {
                    return ((__Internal*)__Instance)->ClientRandom;
                }

                set
                {
                    ((__Internal*)__Instance)->ClientRandom = value;
                }
            }

            public byte ClientEarlyTrafficSecret
            {
                get
                {
                    return ((__Internal*)__Instance)->ClientEarlyTrafficSecret;
                }

                set
                {
                    ((__Internal*)__Instance)->ClientEarlyTrafficSecret = value;
                }
            }

            public byte ClientHandshakeTrafficSecret
            {
                get
                {
                    return ((__Internal*)__Instance)->ClientHandshakeTrafficSecret;
                }

                set
                {
                    ((__Internal*)__Instance)->ClientHandshakeTrafficSecret = value;
                }
            }

            public byte ServerHandshakeTrafficSecret
            {
                get
                {
                    return ((__Internal*)__Instance)->ServerHandshakeTrafficSecret;
                }

                set
                {
                    ((__Internal*)__Instance)->ServerHandshakeTrafficSecret = value;
                }
            }

            public byte ClientTrafficSecret0
            {
                get
                {
                    return ((__Internal*)__Instance)->ClientTrafficSecret0;
                }

                set
                {
                    ((__Internal*)__Instance)->ClientTrafficSecret0 = value;
                }
            }

            public byte ServerTrafficSecret0
            {
                get
                {
                    return ((__Internal*)__Instance)->ServerTrafficSecret0;
                }

                set
                {
                    ((__Internal*)__Instance)->ServerTrafficSecret0 = value;
                }
            }
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_TLS_SECRETS> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_TLS_SECRETS>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::AKNet.MSQuicWrapper.QUIC_TLS_SECRETS managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::AKNet.MSQuicWrapper.QUIC_TLS_SECRETS managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static QUIC_TLS_SECRETS __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new QUIC_TLS_SECRETS(native.ToPointer(), skipVTables);
        }

        internal static QUIC_TLS_SECRETS __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (QUIC_TLS_SECRETS)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static QUIC_TLS_SECRETS __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new QUIC_TLS_SECRETS(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private QUIC_TLS_SECRETS(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected QUIC_TLS_SECRETS(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public QUIC_TLS_SECRETS()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_TLS_SECRETS.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public QUIC_TLS_SECRETS(global::AKNet.MSQuicWrapper.QUIC_TLS_SECRETS _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_TLS_SECRETS.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::AKNet.MSQuicWrapper.QUIC_TLS_SECRETS.__Internal*) __Instance) = *((global::AKNet.MSQuicWrapper.QUIC_TLS_SECRETS.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public byte SecretLength
        {
            get
            {
                return ((__Internal*)__Instance)->SecretLength;
            }

            set
            {
                ((__Internal*)__Instance)->SecretLength = value;
            }
        }

        public global::AKNet.MSQuicWrapper.QUIC_TLS_SECRETS.IsSet isSet
        {
            get
            {
                return global::AKNet.MSQuicWrapper.QUIC_TLS_SECRETS.IsSet.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->IsSet));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->IsSet = *(global::AKNet.MSQuicWrapper.QUIC_TLS_SECRETS.IsSet.__Internal*) value.__Instance;
            }
        }

        public byte[] ClientRandom
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<byte>(((__Internal*)__Instance)->ClientRandom, 32);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 32; i++)
                        ((__Internal*)__Instance)->ClientRandom[i] = value[i];
                }
            }
        }

        public byte[] ClientEarlyTrafficSecret
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<byte>(((__Internal*)__Instance)->ClientEarlyTrafficSecret, 64);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 64; i++)
                        ((__Internal*)__Instance)->ClientEarlyTrafficSecret[i] = value[i];
                }
            }
        }

        public byte[] ClientHandshakeTrafficSecret
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<byte>(((__Internal*)__Instance)->ClientHandshakeTrafficSecret, 64);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 64; i++)
                        ((__Internal*)__Instance)->ClientHandshakeTrafficSecret[i] = value[i];
                }
            }
        }

        public byte[] ServerHandshakeTrafficSecret
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<byte>(((__Internal*)__Instance)->ServerHandshakeTrafficSecret, 64);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 64; i++)
                        ((__Internal*)__Instance)->ServerHandshakeTrafficSecret[i] = value[i];
                }
            }
        }

        public byte[] ClientTrafficSecret0
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<byte>(((__Internal*)__Instance)->ClientTrafficSecret0, 64);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 64; i++)
                        ((__Internal*)__Instance)->ClientTrafficSecret0[i] = value[i];
                }
            }
        }

        public byte[] ServerTrafficSecret0
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<byte>(((__Internal*)__Instance)->ServerTrafficSecret0, 64);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 64; i++)
                        ((__Internal*)__Instance)->ServerTrafficSecret0[i] = value[i];
                }
            }
        }
    }

    public unsafe partial class QUIC_STREAM_STATISTICS : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 64)]
        public partial struct __Internal
        {
            internal ulong ConnBlockedBySchedulingUs;
            internal ulong ConnBlockedByPacingUs;
            internal ulong ConnBlockedByAmplificationProtUs;
            internal ulong ConnBlockedByCongestionControlUs;
            internal ulong ConnBlockedByFlowControlUs;
            internal ulong StreamBlockedByIdFlowControlUs;
            internal ulong StreamBlockedByFlowControlUs;
            internal ulong StreamBlockedByAppUs;

            [SuppressUnmanagedCodeSecurity, DllImport("MSQuicSSL_Wrapper", EntryPoint = "??0QUIC_STREAM_STATISTICS@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_STREAM_STATISTICS> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_STREAM_STATISTICS>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::AKNet.MSQuicWrapper.QUIC_STREAM_STATISTICS managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::AKNet.MSQuicWrapper.QUIC_STREAM_STATISTICS managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static QUIC_STREAM_STATISTICS __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new QUIC_STREAM_STATISTICS(native.ToPointer(), skipVTables);
        }

        internal static QUIC_STREAM_STATISTICS __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (QUIC_STREAM_STATISTICS)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static QUIC_STREAM_STATISTICS __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new QUIC_STREAM_STATISTICS(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private QUIC_STREAM_STATISTICS(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected QUIC_STREAM_STATISTICS(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public QUIC_STREAM_STATISTICS()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_STREAM_STATISTICS.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public QUIC_STREAM_STATISTICS(global::AKNet.MSQuicWrapper.QUIC_STREAM_STATISTICS _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_STREAM_STATISTICS.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::AKNet.MSQuicWrapper.QUIC_STREAM_STATISTICS.__Internal*) __Instance) = *((global::AKNet.MSQuicWrapper.QUIC_STREAM_STATISTICS.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ulong ConnBlockedBySchedulingUs
        {
            get
            {
                return ((__Internal*)__Instance)->ConnBlockedBySchedulingUs;
            }

            set
            {
                ((__Internal*)__Instance)->ConnBlockedBySchedulingUs = value;
            }
        }

        public ulong ConnBlockedByPacingUs
        {
            get
            {
                return ((__Internal*)__Instance)->ConnBlockedByPacingUs;
            }

            set
            {
                ((__Internal*)__Instance)->ConnBlockedByPacingUs = value;
            }
        }

        public ulong ConnBlockedByAmplificationProtUs
        {
            get
            {
                return ((__Internal*)__Instance)->ConnBlockedByAmplificationProtUs;
            }

            set
            {
                ((__Internal*)__Instance)->ConnBlockedByAmplificationProtUs = value;
            }
        }

        public ulong ConnBlockedByCongestionControlUs
        {
            get
            {
                return ((__Internal*)__Instance)->ConnBlockedByCongestionControlUs;
            }

            set
            {
                ((__Internal*)__Instance)->ConnBlockedByCongestionControlUs = value;
            }
        }

        public ulong ConnBlockedByFlowControlUs
        {
            get
            {
                return ((__Internal*)__Instance)->ConnBlockedByFlowControlUs;
            }

            set
            {
                ((__Internal*)__Instance)->ConnBlockedByFlowControlUs = value;
            }
        }

        public ulong StreamBlockedByIdFlowControlUs
        {
            get
            {
                return ((__Internal*)__Instance)->StreamBlockedByIdFlowControlUs;
            }

            set
            {
                ((__Internal*)__Instance)->StreamBlockedByIdFlowControlUs = value;
            }
        }

        public ulong StreamBlockedByFlowControlUs
        {
            get
            {
                return ((__Internal*)__Instance)->StreamBlockedByFlowControlUs;
            }

            set
            {
                ((__Internal*)__Instance)->StreamBlockedByFlowControlUs = value;
            }
        }

        public ulong StreamBlockedByAppUs
        {
            get
            {
                return ((__Internal*)__Instance)->StreamBlockedByAppUs;
            }

            set
            {
                ((__Internal*)__Instance)->StreamBlockedByAppUs = value;
            }
        }
    }

    public unsafe partial class QUIC_SCHANNEL_CREDENTIAL_ATTRIBUTE_W : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal uint Attribute;
            internal uint BufferLength;
            internal __IntPtr Buffer;

            [SuppressUnmanagedCodeSecurity, DllImport("MSQuicSSL_Wrapper", EntryPoint = "??0QUIC_SCHANNEL_CREDENTIAL_ATTRIBUTE_W@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_SCHANNEL_CREDENTIAL_ATTRIBUTE_W> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_SCHANNEL_CREDENTIAL_ATTRIBUTE_W>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::AKNet.MSQuicWrapper.QUIC_SCHANNEL_CREDENTIAL_ATTRIBUTE_W managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::AKNet.MSQuicWrapper.QUIC_SCHANNEL_CREDENTIAL_ATTRIBUTE_W managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static QUIC_SCHANNEL_CREDENTIAL_ATTRIBUTE_W __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new QUIC_SCHANNEL_CREDENTIAL_ATTRIBUTE_W(native.ToPointer(), skipVTables);
        }

        internal static QUIC_SCHANNEL_CREDENTIAL_ATTRIBUTE_W __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (QUIC_SCHANNEL_CREDENTIAL_ATTRIBUTE_W)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static QUIC_SCHANNEL_CREDENTIAL_ATTRIBUTE_W __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new QUIC_SCHANNEL_CREDENTIAL_ATTRIBUTE_W(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private QUIC_SCHANNEL_CREDENTIAL_ATTRIBUTE_W(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected QUIC_SCHANNEL_CREDENTIAL_ATTRIBUTE_W(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public QUIC_SCHANNEL_CREDENTIAL_ATTRIBUTE_W()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_SCHANNEL_CREDENTIAL_ATTRIBUTE_W.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public QUIC_SCHANNEL_CREDENTIAL_ATTRIBUTE_W(global::AKNet.MSQuicWrapper.QUIC_SCHANNEL_CREDENTIAL_ATTRIBUTE_W _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_SCHANNEL_CREDENTIAL_ATTRIBUTE_W.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::AKNet.MSQuicWrapper.QUIC_SCHANNEL_CREDENTIAL_ATTRIBUTE_W.__Internal*) __Instance) = *((global::AKNet.MSQuicWrapper.QUIC_SCHANNEL_CREDENTIAL_ATTRIBUTE_W.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Attribute
        {
            get
            {
                return ((__Internal*)__Instance)->Attribute;
            }

            set
            {
                ((__Internal*)__Instance)->Attribute = value;
            }
        }

        public uint BufferLength
        {
            get
            {
                return ((__Internal*)__Instance)->BufferLength;
            }

            set
            {
                ((__Internal*)__Instance)->BufferLength = value;
            }
        }

        public __IntPtr Buffer
        {
            get
            {
                return ((__Internal*)__Instance)->Buffer;
            }

            set
            {
                ((__Internal*)__Instance)->Buffer = (__IntPtr) value;
            }
        }
    }

    public unsafe partial class QUIC_SCHANNEL_CONTEXT_ATTRIBUTE_W : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal uint Attribute;
            internal __IntPtr Buffer;

            [SuppressUnmanagedCodeSecurity, DllImport("MSQuicSSL_Wrapper", EntryPoint = "??0QUIC_SCHANNEL_CONTEXT_ATTRIBUTE_W@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_SCHANNEL_CONTEXT_ATTRIBUTE_W> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_SCHANNEL_CONTEXT_ATTRIBUTE_W>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::AKNet.MSQuicWrapper.QUIC_SCHANNEL_CONTEXT_ATTRIBUTE_W managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::AKNet.MSQuicWrapper.QUIC_SCHANNEL_CONTEXT_ATTRIBUTE_W managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static QUIC_SCHANNEL_CONTEXT_ATTRIBUTE_W __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new QUIC_SCHANNEL_CONTEXT_ATTRIBUTE_W(native.ToPointer(), skipVTables);
        }

        internal static QUIC_SCHANNEL_CONTEXT_ATTRIBUTE_W __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (QUIC_SCHANNEL_CONTEXT_ATTRIBUTE_W)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static QUIC_SCHANNEL_CONTEXT_ATTRIBUTE_W __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new QUIC_SCHANNEL_CONTEXT_ATTRIBUTE_W(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private QUIC_SCHANNEL_CONTEXT_ATTRIBUTE_W(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected QUIC_SCHANNEL_CONTEXT_ATTRIBUTE_W(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public QUIC_SCHANNEL_CONTEXT_ATTRIBUTE_W()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_SCHANNEL_CONTEXT_ATTRIBUTE_W.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public QUIC_SCHANNEL_CONTEXT_ATTRIBUTE_W(global::AKNet.MSQuicWrapper.QUIC_SCHANNEL_CONTEXT_ATTRIBUTE_W _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_SCHANNEL_CONTEXT_ATTRIBUTE_W.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::AKNet.MSQuicWrapper.QUIC_SCHANNEL_CONTEXT_ATTRIBUTE_W.__Internal*) __Instance) = *((global::AKNet.MSQuicWrapper.QUIC_SCHANNEL_CONTEXT_ATTRIBUTE_W.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Attribute
        {
            get
            {
                return ((__Internal*)__Instance)->Attribute;
            }

            set
            {
                ((__Internal*)__Instance)->Attribute = value;
            }
        }

        public __IntPtr Buffer
        {
            get
            {
                return ((__Internal*)__Instance)->Buffer;
            }

            set
            {
                ((__Internal*)__Instance)->Buffer = (__IntPtr) value;
            }
        }
    }

    public unsafe partial class QUIC_SCHANNEL_CONTEXT_ATTRIBUTE_EX_W : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 16)]
        public partial struct __Internal
        {
            internal uint Attribute;
            internal uint BufferLength;
            internal __IntPtr Buffer;

            [SuppressUnmanagedCodeSecurity, DllImport("MSQuicSSL_Wrapper", EntryPoint = "??0QUIC_SCHANNEL_CONTEXT_ATTRIBUTE_EX_W@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_SCHANNEL_CONTEXT_ATTRIBUTE_EX_W> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_SCHANNEL_CONTEXT_ATTRIBUTE_EX_W>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::AKNet.MSQuicWrapper.QUIC_SCHANNEL_CONTEXT_ATTRIBUTE_EX_W managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::AKNet.MSQuicWrapper.QUIC_SCHANNEL_CONTEXT_ATTRIBUTE_EX_W managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static QUIC_SCHANNEL_CONTEXT_ATTRIBUTE_EX_W __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new QUIC_SCHANNEL_CONTEXT_ATTRIBUTE_EX_W(native.ToPointer(), skipVTables);
        }

        internal static QUIC_SCHANNEL_CONTEXT_ATTRIBUTE_EX_W __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (QUIC_SCHANNEL_CONTEXT_ATTRIBUTE_EX_W)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static QUIC_SCHANNEL_CONTEXT_ATTRIBUTE_EX_W __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new QUIC_SCHANNEL_CONTEXT_ATTRIBUTE_EX_W(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private QUIC_SCHANNEL_CONTEXT_ATTRIBUTE_EX_W(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected QUIC_SCHANNEL_CONTEXT_ATTRIBUTE_EX_W(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public QUIC_SCHANNEL_CONTEXT_ATTRIBUTE_EX_W()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_SCHANNEL_CONTEXT_ATTRIBUTE_EX_W.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public QUIC_SCHANNEL_CONTEXT_ATTRIBUTE_EX_W(global::AKNet.MSQuicWrapper.QUIC_SCHANNEL_CONTEXT_ATTRIBUTE_EX_W _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_SCHANNEL_CONTEXT_ATTRIBUTE_EX_W.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::AKNet.MSQuicWrapper.QUIC_SCHANNEL_CONTEXT_ATTRIBUTE_EX_W.__Internal*) __Instance) = *((global::AKNet.MSQuicWrapper.QUIC_SCHANNEL_CONTEXT_ATTRIBUTE_EX_W.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Attribute
        {
            get
            {
                return ((__Internal*)__Instance)->Attribute;
            }

            set
            {
                ((__Internal*)__Instance)->Attribute = value;
            }
        }

        public uint BufferLength
        {
            get
            {
                return ((__Internal*)__Instance)->BufferLength;
            }

            set
            {
                ((__Internal*)__Instance)->BufferLength = value;
            }
        }

        public __IntPtr Buffer
        {
            get
            {
                return ((__Internal*)__Instance)->Buffer;
            }

            set
            {
                ((__Internal*)__Instance)->Buffer = (__IntPtr) value;
            }
        }
    }

    public unsafe partial class QUIC_LISTENER_EVENT : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::AKNet.MSQuicWrapper.QUIC_LISTENER_EVENT_TYPE Type;

            [FieldOffset(8)]
            internal global::AKNet.MSQuicWrapper.QUIC_LISTENER_EVENT._0.NEW_CONNECTION.__Internal NEW_CONNECTION;

            [FieldOffset(8)]
            internal global::AKNet.MSQuicWrapper.QUIC_LISTENER_EVENT._0.STOP_COMPLETE.__Internal STOP_COMPLETE;

            [SuppressUnmanagedCodeSecurity, DllImport("MSQuicSSL_Wrapper", EntryPoint = "??0QUIC_LISTENER_EVENT@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public unsafe partial struct _0
        {
            [StructLayout(LayoutKind.Explicit, Size = 16)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::AKNet.MSQuicWrapper.QUIC_LISTENER_EVENT._0.NEW_CONNECTION.__Internal NEW_CONNECTION;

                [FieldOffset(0)]
                internal global::AKNet.MSQuicWrapper.QUIC_LISTENER_EVENT._0.STOP_COMPLETE.__Internal STOP_COMPLETE;
            }

            public unsafe partial class NEW_CONNECTION
            {
                [StructLayout(LayoutKind.Sequential, Size = 16)]
                public partial struct __Internal
                {
                    internal __IntPtr Info;
                    internal __IntPtr Connection;
                }
            }

            public unsafe partial class STOP_COMPLETE
            {
                [StructLayout(LayoutKind.Explicit, Size = 1)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    internal byte AppCloseInProgress;

                    [FieldOffset(0)]
                    internal byte RESERVED;
                }
            }
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_LISTENER_EVENT> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_LISTENER_EVENT>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::AKNet.MSQuicWrapper.QUIC_LISTENER_EVENT managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::AKNet.MSQuicWrapper.QUIC_LISTENER_EVENT managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static QUIC_LISTENER_EVENT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new QUIC_LISTENER_EVENT(native.ToPointer(), skipVTables);
        }

        internal static QUIC_LISTENER_EVENT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (QUIC_LISTENER_EVENT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static QUIC_LISTENER_EVENT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new QUIC_LISTENER_EVENT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private QUIC_LISTENER_EVENT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected QUIC_LISTENER_EVENT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public QUIC_LISTENER_EVENT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_LISTENER_EVENT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public QUIC_LISTENER_EVENT(global::AKNet.MSQuicWrapper.QUIC_LISTENER_EVENT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_LISTENER_EVENT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::AKNet.MSQuicWrapper.QUIC_LISTENER_EVENT.__Internal*) __Instance) = *((global::AKNet.MSQuicWrapper.QUIC_LISTENER_EVENT.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::AKNet.MSQuicWrapper.QUIC_LISTENER_EVENT_TYPE Type
        {
            get
            {
                return ((__Internal*)__Instance)->Type;
            }

            set
            {
                ((__Internal*)__Instance)->Type = value;
            }
        }
    }

    public unsafe partial class QUIC_CONNECTION_EVENT : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 32)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::AKNet.MSQuicWrapper.QUIC_CONNECTION_EVENT_TYPE Type;

            [FieldOffset(8)]
            internal global::AKNet.MSQuicWrapper.QUIC_CONNECTION_EVENT._0.CONNECTED.__Internal CONNECTED;

            [FieldOffset(8)]
            internal global::AKNet.MSQuicWrapper.QUIC_CONNECTION_EVENT._0.SHUTDOWN_INITIATED_BY_TRANSPORT.__Internal SHUTDOWN_INITIATED_BY_TRANSPORT;

            [FieldOffset(8)]
            internal global::AKNet.MSQuicWrapper.QUIC_CONNECTION_EVENT._0.SHUTDOWN_INITIATED_BY_PEER.__Internal SHUTDOWN_INITIATED_BY_PEER;

            [FieldOffset(8)]
            internal global::AKNet.MSQuicWrapper.QUIC_CONNECTION_EVENT._0.SHUTDOWN_COMPLETE.__Internal SHUTDOWN_COMPLETE;

            [FieldOffset(8)]
            internal global::AKNet.MSQuicWrapper.QUIC_CONNECTION_EVENT._0.LOCAL_ADDRESS_CHANGED.__Internal LOCAL_ADDRESS_CHANGED;

            [FieldOffset(8)]
            internal global::AKNet.MSQuicWrapper.QUIC_CONNECTION_EVENT._0.PEER_ADDRESS_CHANGED.__Internal PEER_ADDRESS_CHANGED;

            [FieldOffset(8)]
            internal global::AKNet.MSQuicWrapper.QUIC_CONNECTION_EVENT._0.PEER_STREAM_STARTED.__Internal PEER_STREAM_STARTED;

            [FieldOffset(8)]
            internal global::AKNet.MSQuicWrapper.QUIC_CONNECTION_EVENT._0.STREAMS_AVAILABLE.__Internal STREAMS_AVAILABLE;

            [FieldOffset(8)]
            internal global::AKNet.MSQuicWrapper.QUIC_CONNECTION_EVENT._0.PEER_NEEDS_STREAMS.__Internal PEER_NEEDS_STREAMS;

            [FieldOffset(8)]
            internal global::AKNet.MSQuicWrapper.QUIC_CONNECTION_EVENT._0.IDEAL_PROCESSOR_CHANGED.__Internal IDEAL_PROCESSOR_CHANGED;

            [FieldOffset(8)]
            internal global::AKNet.MSQuicWrapper.QUIC_CONNECTION_EVENT._0.DATAGRAM_STATE_CHANGED.__Internal DATAGRAM_STATE_CHANGED;

            [FieldOffset(8)]
            internal global::AKNet.MSQuicWrapper.QUIC_CONNECTION_EVENT._0.DATAGRAM_RECEIVED.__Internal DATAGRAM_RECEIVED;

            [FieldOffset(8)]
            internal global::AKNet.MSQuicWrapper.QUIC_CONNECTION_EVENT._0.DATAGRAM_SEND_STATE_CHANGED.__Internal DATAGRAM_SEND_STATE_CHANGED;

            [FieldOffset(8)]
            internal global::AKNet.MSQuicWrapper.QUIC_CONNECTION_EVENT._0.RESUMED.__Internal RESUMED;

            [FieldOffset(8)]
            internal global::AKNet.MSQuicWrapper.QUIC_CONNECTION_EVENT._0.RESUMPTION_TICKET_RECEIVED.__Internal RESUMPTION_TICKET_RECEIVED;

            [FieldOffset(8)]
            internal global::AKNet.MSQuicWrapper.QUIC_CONNECTION_EVENT._0.PEER_CERTIFICATE_RECEIVED.__Internal PEER_CERTIFICATE_RECEIVED;

            [SuppressUnmanagedCodeSecurity, DllImport("MSQuicSSL_Wrapper", EntryPoint = "??0QUIC_CONNECTION_EVENT@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public unsafe partial struct _0
        {
            [StructLayout(LayoutKind.Explicit, Size = 24)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::AKNet.MSQuicWrapper.QUIC_CONNECTION_EVENT._0.CONNECTED.__Internal CONNECTED;

                [FieldOffset(0)]
                internal global::AKNet.MSQuicWrapper.QUIC_CONNECTION_EVENT._0.SHUTDOWN_INITIATED_BY_TRANSPORT.__Internal SHUTDOWN_INITIATED_BY_TRANSPORT;

                [FieldOffset(0)]
                internal global::AKNet.MSQuicWrapper.QUIC_CONNECTION_EVENT._0.SHUTDOWN_INITIATED_BY_PEER.__Internal SHUTDOWN_INITIATED_BY_PEER;

                [FieldOffset(0)]
                internal global::AKNet.MSQuicWrapper.QUIC_CONNECTION_EVENT._0.SHUTDOWN_COMPLETE.__Internal SHUTDOWN_COMPLETE;

                [FieldOffset(0)]
                internal global::AKNet.MSQuicWrapper.QUIC_CONNECTION_EVENT._0.LOCAL_ADDRESS_CHANGED.__Internal LOCAL_ADDRESS_CHANGED;

                [FieldOffset(0)]
                internal global::AKNet.MSQuicWrapper.QUIC_CONNECTION_EVENT._0.PEER_ADDRESS_CHANGED.__Internal PEER_ADDRESS_CHANGED;

                [FieldOffset(0)]
                internal global::AKNet.MSQuicWrapper.QUIC_CONNECTION_EVENT._0.PEER_STREAM_STARTED.__Internal PEER_STREAM_STARTED;

                [FieldOffset(0)]
                internal global::AKNet.MSQuicWrapper.QUIC_CONNECTION_EVENT._0.STREAMS_AVAILABLE.__Internal STREAMS_AVAILABLE;

                [FieldOffset(0)]
                internal global::AKNet.MSQuicWrapper.QUIC_CONNECTION_EVENT._0.PEER_NEEDS_STREAMS.__Internal PEER_NEEDS_STREAMS;

                [FieldOffset(0)]
                internal global::AKNet.MSQuicWrapper.QUIC_CONNECTION_EVENT._0.IDEAL_PROCESSOR_CHANGED.__Internal IDEAL_PROCESSOR_CHANGED;

                [FieldOffset(0)]
                internal global::AKNet.MSQuicWrapper.QUIC_CONNECTION_EVENT._0.DATAGRAM_STATE_CHANGED.__Internal DATAGRAM_STATE_CHANGED;

                [FieldOffset(0)]
                internal global::AKNet.MSQuicWrapper.QUIC_CONNECTION_EVENT._0.DATAGRAM_RECEIVED.__Internal DATAGRAM_RECEIVED;

                [FieldOffset(0)]
                internal global::AKNet.MSQuicWrapper.QUIC_CONNECTION_EVENT._0.DATAGRAM_SEND_STATE_CHANGED.__Internal DATAGRAM_SEND_STATE_CHANGED;

                [FieldOffset(0)]
                internal global::AKNet.MSQuicWrapper.QUIC_CONNECTION_EVENT._0.RESUMED.__Internal RESUMED;

                [FieldOffset(0)]
                internal global::AKNet.MSQuicWrapper.QUIC_CONNECTION_EVENT._0.RESUMPTION_TICKET_RECEIVED.__Internal RESUMPTION_TICKET_RECEIVED;

                [FieldOffset(0)]
                internal global::AKNet.MSQuicWrapper.QUIC_CONNECTION_EVENT._0.PEER_CERTIFICATE_RECEIVED.__Internal PEER_CERTIFICATE_RECEIVED;
            }

            public unsafe partial class CONNECTED
            {
                [StructLayout(LayoutKind.Sequential, Size = 16)]
                public partial struct __Internal
                {
                    internal byte SessionResumed;
                    internal byte NegotiatedAlpnLength;
                    internal __IntPtr NegotiatedAlpn;
                }
            }

            public unsafe partial class SHUTDOWN_INITIATED_BY_TRANSPORT
            {
                [StructLayout(LayoutKind.Sequential, Size = 16)]
                public partial struct __Internal
                {
                    internal int Status;
                    internal ulong ErrorCode;
                }
            }

            public unsafe partial class SHUTDOWN_INITIATED_BY_PEER
            {
                [StructLayout(LayoutKind.Sequential, Size = 8)]
                public partial struct __Internal
                {
                    internal ulong ErrorCode;
                }
            }

            public unsafe partial class SHUTDOWN_COMPLETE
            {
                [StructLayout(LayoutKind.Explicit, Size = 1)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    internal byte HandshakeCompleted;

                    [FieldOffset(0)]
                    internal byte PeerAcknowledgedShutdown;

                    [FieldOffset(0)]
                    internal byte AppCloseInProgress;
                }
            }

            public unsafe partial class LOCAL_ADDRESS_CHANGED
            {
                [StructLayout(LayoutKind.Sequential, Size = 8)]
                public partial struct __Internal
                {
                    internal __IntPtr Address;
                }
            }

            public unsafe partial class PEER_ADDRESS_CHANGED
            {
                [StructLayout(LayoutKind.Sequential, Size = 8)]
                public partial struct __Internal
                {
                    internal __IntPtr Address;
                }
            }

            public unsafe partial class PEER_STREAM_STARTED
            {
                [StructLayout(LayoutKind.Sequential, Size = 16)]
                public partial struct __Internal
                {
                    internal __IntPtr Stream;
                    internal global::AKNet.MSQuicWrapper.QUIC_STREAM_OPEN_FLAGS Flags;
                }
            }

            public unsafe partial class STREAMS_AVAILABLE
            {
                [StructLayout(LayoutKind.Sequential, Size = 4)]
                public partial struct __Internal
                {
                    internal ushort BidirectionalCount;
                    internal ushort UnidirectionalCount;
                }
            }

            public unsafe partial class PEER_NEEDS_STREAMS
            {
                [StructLayout(LayoutKind.Sequential, Size = 1)]
                public partial struct __Internal
                {
                    internal byte Bidirectional;
                }
            }

            public unsafe partial class IDEAL_PROCESSOR_CHANGED
            {
                [StructLayout(LayoutKind.Sequential, Size = 4)]
                public partial struct __Internal
                {
                    internal ushort IdealProcessor;
                    internal ushort PartitionIndex;
                }
            }

            public unsafe partial class DATAGRAM_STATE_CHANGED
            {
                [StructLayout(LayoutKind.Sequential, Size = 4)]
                public partial struct __Internal
                {
                    internal byte SendEnabled;
                    internal ushort MaxSendLength;
                }
            }

            public unsafe partial class DATAGRAM_RECEIVED
            {
                [StructLayout(LayoutKind.Sequential, Size = 16)]
                public partial struct __Internal
                {
                    internal __IntPtr Buffer;
                    internal global::AKNet.MSQuicWrapper.QUIC_RECEIVE_FLAGS Flags;
                }
            }

            public unsafe partial class DATAGRAM_SEND_STATE_CHANGED
            {
                [StructLayout(LayoutKind.Sequential, Size = 16)]
                public partial struct __Internal
                {
                    internal __IntPtr ClientContext;
                    internal global::AKNet.MSQuicWrapper.QUIC_DATAGRAM_SEND_STATE State;
                }
            }

            public unsafe partial class RESUMED
            {
                [StructLayout(LayoutKind.Sequential, Size = 16)]
                public partial struct __Internal
                {
                    internal ushort ResumptionStateLength;
                    internal __IntPtr ResumptionState;
                }
            }

            public unsafe partial class RESUMPTION_TICKET_RECEIVED
            {
                [StructLayout(LayoutKind.Sequential, Size = 16)]
                public partial struct __Internal
                {
                    internal uint ResumptionTicketLength;
                    internal __IntPtr ResumptionTicket;
                }
            }

            public unsafe partial class PEER_CERTIFICATE_RECEIVED
            {
                [StructLayout(LayoutKind.Sequential, Size = 24)]
                public partial struct __Internal
                {
                    internal __IntPtr Certificate;
                    internal uint DeferredErrorFlags;
                    internal int DeferredStatus;
                    internal __IntPtr Chain;
                }
            }
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_CONNECTION_EVENT> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_CONNECTION_EVENT>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::AKNet.MSQuicWrapper.QUIC_CONNECTION_EVENT managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::AKNet.MSQuicWrapper.QUIC_CONNECTION_EVENT managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static QUIC_CONNECTION_EVENT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new QUIC_CONNECTION_EVENT(native.ToPointer(), skipVTables);
        }

        internal static QUIC_CONNECTION_EVENT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (QUIC_CONNECTION_EVENT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static QUIC_CONNECTION_EVENT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new QUIC_CONNECTION_EVENT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private QUIC_CONNECTION_EVENT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected QUIC_CONNECTION_EVENT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public QUIC_CONNECTION_EVENT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_CONNECTION_EVENT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public QUIC_CONNECTION_EVENT(global::AKNet.MSQuicWrapper.QUIC_CONNECTION_EVENT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_CONNECTION_EVENT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::AKNet.MSQuicWrapper.QUIC_CONNECTION_EVENT.__Internal*) __Instance) = *((global::AKNet.MSQuicWrapper.QUIC_CONNECTION_EVENT.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::AKNet.MSQuicWrapper.QUIC_CONNECTION_EVENT_TYPE Type
        {
            get
            {
                return ((__Internal*)__Instance)->Type;
            }

            set
            {
                ((__Internal*)__Instance)->Type = value;
            }
        }
    }

    public unsafe partial class QUIC_STREAM_EVENT : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::AKNet.MSQuicWrapper.QUIC_STREAM_EVENT_TYPE Type;

            [FieldOffset(8)]
            internal global::AKNet.MSQuicWrapper.QUIC_STREAM_EVENT._0.START_COMPLETE.__Internal START_COMPLETE;

            [FieldOffset(8)]
            internal global::AKNet.MSQuicWrapper.QUIC_STREAM_EVENT._0.RECEIVE.__Internal RECEIVE;

            [FieldOffset(8)]
            internal global::AKNet.MSQuicWrapper.QUIC_STREAM_EVENT._0.SEND_COMPLETE.__Internal SEND_COMPLETE;

            [FieldOffset(8)]
            internal global::AKNet.MSQuicWrapper.QUIC_STREAM_EVENT._0.PEER_SEND_ABORTED.__Internal PEER_SEND_ABORTED;

            [FieldOffset(8)]
            internal global::AKNet.MSQuicWrapper.QUIC_STREAM_EVENT._0.PEER_RECEIVE_ABORTED.__Internal PEER_RECEIVE_ABORTED;

            [FieldOffset(8)]
            internal global::AKNet.MSQuicWrapper.QUIC_STREAM_EVENT._0.SEND_SHUTDOWN_COMPLETE.__Internal SEND_SHUTDOWN_COMPLETE;

            [FieldOffset(8)]
            internal global::AKNet.MSQuicWrapper.QUIC_STREAM_EVENT._0.SHUTDOWN_COMPLETE.__Internal SHUTDOWN_COMPLETE;

            [FieldOffset(8)]
            internal global::AKNet.MSQuicWrapper.QUIC_STREAM_EVENT._0.IDEAL_SEND_BUFFER_SIZE.__Internal IDEAL_SEND_BUFFER_SIZE;

            [FieldOffset(8)]
            internal global::AKNet.MSQuicWrapper.QUIC_STREAM_EVENT._0.CANCEL_ON_LOSS.__Internal CANCEL_ON_LOSS;

            [SuppressUnmanagedCodeSecurity, DllImport("MSQuicSSL_Wrapper", EntryPoint = "??0QUIC_STREAM_EVENT@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public unsafe partial struct _0
        {
            [StructLayout(LayoutKind.Explicit, Size = 32)]
            public partial struct __Internal
            {
                [FieldOffset(0)]
                internal global::AKNet.MSQuicWrapper.QUIC_STREAM_EVENT._0.START_COMPLETE.__Internal START_COMPLETE;

                [FieldOffset(0)]
                internal global::AKNet.MSQuicWrapper.QUIC_STREAM_EVENT._0.RECEIVE.__Internal RECEIVE;

                [FieldOffset(0)]
                internal global::AKNet.MSQuicWrapper.QUIC_STREAM_EVENT._0.SEND_COMPLETE.__Internal SEND_COMPLETE;

                [FieldOffset(0)]
                internal global::AKNet.MSQuicWrapper.QUIC_STREAM_EVENT._0.PEER_SEND_ABORTED.__Internal PEER_SEND_ABORTED;

                [FieldOffset(0)]
                internal global::AKNet.MSQuicWrapper.QUIC_STREAM_EVENT._0.PEER_RECEIVE_ABORTED.__Internal PEER_RECEIVE_ABORTED;

                [FieldOffset(0)]
                internal global::AKNet.MSQuicWrapper.QUIC_STREAM_EVENT._0.SEND_SHUTDOWN_COMPLETE.__Internal SEND_SHUTDOWN_COMPLETE;

                [FieldOffset(0)]
                internal global::AKNet.MSQuicWrapper.QUIC_STREAM_EVENT._0.SHUTDOWN_COMPLETE.__Internal SHUTDOWN_COMPLETE;

                [FieldOffset(0)]
                internal global::AKNet.MSQuicWrapper.QUIC_STREAM_EVENT._0.IDEAL_SEND_BUFFER_SIZE.__Internal IDEAL_SEND_BUFFER_SIZE;

                [FieldOffset(0)]
                internal global::AKNet.MSQuicWrapper.QUIC_STREAM_EVENT._0.CANCEL_ON_LOSS.__Internal CANCEL_ON_LOSS;
            }

            public unsafe partial class START_COMPLETE
            {
                [StructLayout(LayoutKind.Explicit, Size = 24)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    internal int Status;

                    [FieldOffset(8)]
                    internal ulong ID;

                    [FieldOffset(16)]
                    internal byte PeerAccepted;

                    [FieldOffset(16)]
                    internal byte RESERVED;
                }
            }

            public unsafe partial class RECEIVE
            {
                [StructLayout(LayoutKind.Sequential, Size = 32)]
                public partial struct __Internal
                {
                    internal ulong AbsoluteOffset;
                    internal ulong TotalBufferLength;
                    internal __IntPtr Buffers;
                    internal uint BufferCount;
                    internal global::AKNet.MSQuicWrapper.QUIC_RECEIVE_FLAGS Flags;
                }
            }

            public unsafe partial class SEND_COMPLETE
            {
                [StructLayout(LayoutKind.Sequential, Size = 16)]
                public partial struct __Internal
                {
                    internal byte Canceled;
                    internal __IntPtr ClientContext;
                }
            }

            public unsafe partial class PEER_SEND_ABORTED
            {
                [StructLayout(LayoutKind.Sequential, Size = 8)]
                public partial struct __Internal
                {
                    internal ulong ErrorCode;
                }
            }

            public unsafe partial class PEER_RECEIVE_ABORTED
            {
                [StructLayout(LayoutKind.Sequential, Size = 8)]
                public partial struct __Internal
                {
                    internal ulong ErrorCode;
                }
            }

            public unsafe partial class SEND_SHUTDOWN_COMPLETE
            {
                [StructLayout(LayoutKind.Sequential, Size = 1)]
                public partial struct __Internal
                {
                    internal byte Graceful;
                }
            }

            public unsafe partial class SHUTDOWN_COMPLETE
            {
                [StructLayout(LayoutKind.Explicit, Size = 24)]
                public partial struct __Internal
                {
                    [FieldOffset(0)]
                    internal byte ConnectionShutdown;

                    [FieldOffset(1)]
                    internal byte AppCloseInProgress;

                    [FieldOffset(1)]
                    internal byte ConnectionShutdownByApp;

                    [FieldOffset(1)]
                    internal byte ConnectionClosedRemotely;

                    [FieldOffset(1)]
                    internal byte RESERVED;

                    [FieldOffset(8)]
                    internal ulong ConnectionErrorCode;

                    [FieldOffset(16)]
                    internal int ConnectionCloseStatus;
                }
            }

            public unsafe partial class IDEAL_SEND_BUFFER_SIZE
            {
                [StructLayout(LayoutKind.Sequential, Size = 8)]
                public partial struct __Internal
                {
                    internal ulong ByteCount;
                }
            }

            public unsafe partial class CANCEL_ON_LOSS
            {
                [StructLayout(LayoutKind.Sequential, Size = 8)]
                public partial struct __Internal
                {
                    internal ulong ErrorCode;
                }
            }
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_STREAM_EVENT> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_STREAM_EVENT>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::AKNet.MSQuicWrapper.QUIC_STREAM_EVENT managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::AKNet.MSQuicWrapper.QUIC_STREAM_EVENT managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static QUIC_STREAM_EVENT __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new QUIC_STREAM_EVENT(native.ToPointer(), skipVTables);
        }

        internal static QUIC_STREAM_EVENT __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (QUIC_STREAM_EVENT)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static QUIC_STREAM_EVENT __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new QUIC_STREAM_EVENT(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private QUIC_STREAM_EVENT(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected QUIC_STREAM_EVENT(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public QUIC_STREAM_EVENT()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_STREAM_EVENT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public QUIC_STREAM_EVENT(global::AKNet.MSQuicWrapper.QUIC_STREAM_EVENT _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_STREAM_EVENT.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::AKNet.MSQuicWrapper.QUIC_STREAM_EVENT.__Internal*) __Instance) = *((global::AKNet.MSQuicWrapper.QUIC_STREAM_EVENT.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::AKNet.MSQuicWrapper.QUIC_STREAM_EVENT_TYPE Type
        {
            get
            {
                return ((__Internal*)__Instance)->Type;
            }

            set
            {
                ((__Internal*)__Instance)->Type = value;
            }
        }
    }

    public unsafe partial class QUIC_API_TABLE : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 248)]
        public partial struct __Internal
        {
            internal __IntPtr SetContext;
            internal __IntPtr GetContext;
            internal __IntPtr SetCallbackHandler;
            internal __IntPtr SetParam;
            internal __IntPtr GetParam;
            internal __IntPtr RegistrationOpen;
            internal __IntPtr RegistrationClose;
            internal __IntPtr RegistrationShutdown;
            internal __IntPtr ConfigurationOpen;
            internal __IntPtr ConfigurationClose;
            internal __IntPtr ConfigurationLoadCredential;
            internal __IntPtr ListenerOpen;
            internal __IntPtr ListenerClose;
            internal __IntPtr ListenerStart;
            internal __IntPtr ListenerStop;
            internal __IntPtr ConnectionOpen;
            internal __IntPtr ConnectionClose;
            internal __IntPtr ConnectionShutdown;
            internal __IntPtr ConnectionStart;
            internal __IntPtr ConnectionSetConfiguration;
            internal __IntPtr ConnectionSendResumptionTicket;
            internal __IntPtr StreamOpen;
            internal __IntPtr StreamClose;
            internal __IntPtr StreamStart;
            internal __IntPtr StreamShutdown;
            internal __IntPtr StreamSend;
            internal __IntPtr StreamReceiveComplete;
            internal __IntPtr StreamReceiveSetEnabled;
            internal __IntPtr DatagramSend;
            internal __IntPtr ConnectionResumptionTicketValidationComplete;
            internal __IntPtr ConnectionCertificateValidationComplete;

            [SuppressUnmanagedCodeSecurity, DllImport("MSQuicSSL_Wrapper", EntryPoint = "??0QUIC_API_TABLE@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_API_TABLE> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_API_TABLE>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::AKNet.MSQuicWrapper.QUIC_API_TABLE managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::AKNet.MSQuicWrapper.QUIC_API_TABLE managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static QUIC_API_TABLE __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new QUIC_API_TABLE(native.ToPointer(), skipVTables);
        }

        internal static QUIC_API_TABLE __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (QUIC_API_TABLE)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static QUIC_API_TABLE __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new QUIC_API_TABLE(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private QUIC_API_TABLE(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected QUIC_API_TABLE(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public QUIC_API_TABLE()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_API_TABLE.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public QUIC_API_TABLE(global::AKNet.MSQuicWrapper.QUIC_API_TABLE _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_API_TABLE.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::AKNet.MSQuicWrapper.QUIC_API_TABLE.__Internal*) __Instance) = *((global::AKNet.MSQuicWrapper.QUIC_API_TABLE.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::AKNet.MSQuicWrapper.QUIC_SET_CONTEXT_FN SetContext
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->SetContext;
                return __ptr0 == IntPtr.Zero? null : (global::AKNet.MSQuicWrapper.QUIC_SET_CONTEXT_FN) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::AKNet.MSQuicWrapper.QUIC_SET_CONTEXT_FN));
            }

            set
            {
                ((__Internal*)__Instance)->SetContext = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::AKNet.MSQuicWrapper.QUIC_GET_CONTEXT_FN GetContext
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->GetContext;
                return __ptr0 == IntPtr.Zero? null : (global::AKNet.MSQuicWrapper.QUIC_GET_CONTEXT_FN) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::AKNet.MSQuicWrapper.QUIC_GET_CONTEXT_FN));
            }

            set
            {
                ((__Internal*)__Instance)->GetContext = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::AKNet.MSQuicWrapper.QUIC_SET_CALLBACK_HANDLER_FN SetCallbackHandler
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->SetCallbackHandler;
                return __ptr0 == IntPtr.Zero? null : (global::AKNet.MSQuicWrapper.QUIC_SET_CALLBACK_HANDLER_FN) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::AKNet.MSQuicWrapper.QUIC_SET_CALLBACK_HANDLER_FN));
            }

            set
            {
                ((__Internal*)__Instance)->SetCallbackHandler = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::AKNet.MSQuicWrapper.QUIC_SET_PARAM_FN SetParam
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->SetParam;
                return __ptr0 == IntPtr.Zero? null : (global::AKNet.MSQuicWrapper.QUIC_SET_PARAM_FN) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::AKNet.MSQuicWrapper.QUIC_SET_PARAM_FN));
            }

            set
            {
                ((__Internal*)__Instance)->SetParam = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::AKNet.MSQuicWrapper.QUIC_GET_PARAM_FN GetParam
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->GetParam;
                return __ptr0 == IntPtr.Zero? null : (global::AKNet.MSQuicWrapper.QUIC_GET_PARAM_FN) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::AKNet.MSQuicWrapper.QUIC_GET_PARAM_FN));
            }

            set
            {
                ((__Internal*)__Instance)->GetParam = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::AKNet.MSQuicWrapper.QUIC_REGISTRATION_OPEN_FN RegistrationOpen
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->RegistrationOpen;
                return __ptr0 == IntPtr.Zero? null : (global::AKNet.MSQuicWrapper.QUIC_REGISTRATION_OPEN_FN) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::AKNet.MSQuicWrapper.QUIC_REGISTRATION_OPEN_FN));
            }

            set
            {
                ((__Internal*)__Instance)->RegistrationOpen = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::AKNet.MSQuicWrapper.QUIC_REGISTRATION_CLOSE_FN RegistrationClose
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->RegistrationClose;
                return __ptr0 == IntPtr.Zero? null : (global::AKNet.MSQuicWrapper.QUIC_REGISTRATION_CLOSE_FN) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::AKNet.MSQuicWrapper.QUIC_REGISTRATION_CLOSE_FN));
            }

            set
            {
                ((__Internal*)__Instance)->RegistrationClose = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::AKNet.MSQuicWrapper.QUIC_REGISTRATION_SHUTDOWN_FN RegistrationShutdown
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->RegistrationShutdown;
                return __ptr0 == IntPtr.Zero? null : (global::AKNet.MSQuicWrapper.QUIC_REGISTRATION_SHUTDOWN_FN) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::AKNet.MSQuicWrapper.QUIC_REGISTRATION_SHUTDOWN_FN));
            }

            set
            {
                ((__Internal*)__Instance)->RegistrationShutdown = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::AKNet.MSQuicWrapper.QUIC_CONFIGURATION_OPEN_FN ConfigurationOpen
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->ConfigurationOpen;
                return __ptr0 == IntPtr.Zero? null : (global::AKNet.MSQuicWrapper.QUIC_CONFIGURATION_OPEN_FN) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::AKNet.MSQuicWrapper.QUIC_CONFIGURATION_OPEN_FN));
            }

            set
            {
                ((__Internal*)__Instance)->ConfigurationOpen = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::AKNet.MSQuicWrapper.QUIC_CONFIGURATION_CLOSE_FN ConfigurationClose
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->ConfigurationClose;
                return __ptr0 == IntPtr.Zero? null : (global::AKNet.MSQuicWrapper.QUIC_CONFIGURATION_CLOSE_FN) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::AKNet.MSQuicWrapper.QUIC_CONFIGURATION_CLOSE_FN));
            }

            set
            {
                ((__Internal*)__Instance)->ConfigurationClose = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::AKNet.MSQuicWrapper.QUIC_CONFIGURATION_LOAD_CREDENTIAL_FN ConfigurationLoadCredential
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->ConfigurationLoadCredential;
                return __ptr0 == IntPtr.Zero? null : (global::AKNet.MSQuicWrapper.QUIC_CONFIGURATION_LOAD_CREDENTIAL_FN) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::AKNet.MSQuicWrapper.QUIC_CONFIGURATION_LOAD_CREDENTIAL_FN));
            }

            set
            {
                ((__Internal*)__Instance)->ConfigurationLoadCredential = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::AKNet.MSQuicWrapper.QUIC_LISTENER_OPEN_FN ListenerOpen
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->ListenerOpen;
                return __ptr0 == IntPtr.Zero? null : (global::AKNet.MSQuicWrapper.QUIC_LISTENER_OPEN_FN) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::AKNet.MSQuicWrapper.QUIC_LISTENER_OPEN_FN));
            }

            set
            {
                ((__Internal*)__Instance)->ListenerOpen = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::AKNet.MSQuicWrapper.QUIC_LISTENER_CLOSE_FN ListenerClose
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->ListenerClose;
                return __ptr0 == IntPtr.Zero? null : (global::AKNet.MSQuicWrapper.QUIC_LISTENER_CLOSE_FN) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::AKNet.MSQuicWrapper.QUIC_LISTENER_CLOSE_FN));
            }

            set
            {
                ((__Internal*)__Instance)->ListenerClose = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::AKNet.MSQuicWrapper.QUIC_LISTENER_STOP_FN ListenerStop
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->ListenerStop;
                return __ptr0 == IntPtr.Zero? null : (global::AKNet.MSQuicWrapper.QUIC_LISTENER_STOP_FN) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::AKNet.MSQuicWrapper.QUIC_LISTENER_STOP_FN));
            }

            set
            {
                ((__Internal*)__Instance)->ListenerStop = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::AKNet.MSQuicWrapper.QUIC_CONNECTION_OPEN_FN ConnectionOpen
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->ConnectionOpen;
                return __ptr0 == IntPtr.Zero? null : (global::AKNet.MSQuicWrapper.QUIC_CONNECTION_OPEN_FN) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::AKNet.MSQuicWrapper.QUIC_CONNECTION_OPEN_FN));
            }

            set
            {
                ((__Internal*)__Instance)->ConnectionOpen = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::AKNet.MSQuicWrapper.QUIC_CONNECTION_CLOSE_FN ConnectionClose
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->ConnectionClose;
                return __ptr0 == IntPtr.Zero? null : (global::AKNet.MSQuicWrapper.QUIC_CONNECTION_CLOSE_FN) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::AKNet.MSQuicWrapper.QUIC_CONNECTION_CLOSE_FN));
            }

            set
            {
                ((__Internal*)__Instance)->ConnectionClose = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::AKNet.MSQuicWrapper.QUIC_CONNECTION_SHUTDOWN_FN ConnectionShutdown
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->ConnectionShutdown;
                return __ptr0 == IntPtr.Zero? null : (global::AKNet.MSQuicWrapper.QUIC_CONNECTION_SHUTDOWN_FN) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::AKNet.MSQuicWrapper.QUIC_CONNECTION_SHUTDOWN_FN));
            }

            set
            {
                ((__Internal*)__Instance)->ConnectionShutdown = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::AKNet.MSQuicWrapper.QUIC_CONNECTION_START_FN ConnectionStart
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->ConnectionStart;
                return __ptr0 == IntPtr.Zero? null : (global::AKNet.MSQuicWrapper.QUIC_CONNECTION_START_FN) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::AKNet.MSQuicWrapper.QUIC_CONNECTION_START_FN));
            }

            set
            {
                ((__Internal*)__Instance)->ConnectionStart = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::AKNet.MSQuicWrapper.QUIC_CONNECTION_SET_CONFIGURATION_FN ConnectionSetConfiguration
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->ConnectionSetConfiguration;
                return __ptr0 == IntPtr.Zero? null : (global::AKNet.MSQuicWrapper.QUIC_CONNECTION_SET_CONFIGURATION_FN) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::AKNet.MSQuicWrapper.QUIC_CONNECTION_SET_CONFIGURATION_FN));
            }

            set
            {
                ((__Internal*)__Instance)->ConnectionSetConfiguration = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::AKNet.MSQuicWrapper.QUIC_CONNECTION_SEND_RESUMPTION_FN ConnectionSendResumptionTicket
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->ConnectionSendResumptionTicket;
                return __ptr0 == IntPtr.Zero? null : (global::AKNet.MSQuicWrapper.QUIC_CONNECTION_SEND_RESUMPTION_FN) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::AKNet.MSQuicWrapper.QUIC_CONNECTION_SEND_RESUMPTION_FN));
            }

            set
            {
                ((__Internal*)__Instance)->ConnectionSendResumptionTicket = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::AKNet.MSQuicWrapper.QUIC_STREAM_OPEN_FN StreamOpen
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->StreamOpen;
                return __ptr0 == IntPtr.Zero? null : (global::AKNet.MSQuicWrapper.QUIC_STREAM_OPEN_FN) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::AKNet.MSQuicWrapper.QUIC_STREAM_OPEN_FN));
            }

            set
            {
                ((__Internal*)__Instance)->StreamOpen = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::AKNet.MSQuicWrapper.QUIC_STREAM_CLOSE_FN StreamClose
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->StreamClose;
                return __ptr0 == IntPtr.Zero? null : (global::AKNet.MSQuicWrapper.QUIC_STREAM_CLOSE_FN) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::AKNet.MSQuicWrapper.QUIC_STREAM_CLOSE_FN));
            }

            set
            {
                ((__Internal*)__Instance)->StreamClose = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::AKNet.MSQuicWrapper.QUIC_STREAM_START_FN StreamStart
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->StreamStart;
                return __ptr0 == IntPtr.Zero? null : (global::AKNet.MSQuicWrapper.QUIC_STREAM_START_FN) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::AKNet.MSQuicWrapper.QUIC_STREAM_START_FN));
            }

            set
            {
                ((__Internal*)__Instance)->StreamStart = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::AKNet.MSQuicWrapper.QUIC_STREAM_SHUTDOWN_FN StreamShutdown
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->StreamShutdown;
                return __ptr0 == IntPtr.Zero? null : (global::AKNet.MSQuicWrapper.QUIC_STREAM_SHUTDOWN_FN) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::AKNet.MSQuicWrapper.QUIC_STREAM_SHUTDOWN_FN));
            }

            set
            {
                ((__Internal*)__Instance)->StreamShutdown = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::AKNet.MSQuicWrapper.QUIC_STREAM_SEND_FN StreamSend
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->StreamSend;
                return __ptr0 == IntPtr.Zero? null : (global::AKNet.MSQuicWrapper.QUIC_STREAM_SEND_FN) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::AKNet.MSQuicWrapper.QUIC_STREAM_SEND_FN));
            }

            set
            {
                ((__Internal*)__Instance)->StreamSend = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::AKNet.MSQuicWrapper.QUIC_STREAM_RECEIVE_COMPLETE_FN StreamReceiveComplete
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->StreamReceiveComplete;
                return __ptr0 == IntPtr.Zero? null : (global::AKNet.MSQuicWrapper.QUIC_STREAM_RECEIVE_COMPLETE_FN) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::AKNet.MSQuicWrapper.QUIC_STREAM_RECEIVE_COMPLETE_FN));
            }

            set
            {
                ((__Internal*)__Instance)->StreamReceiveComplete = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::AKNet.MSQuicWrapper.QUIC_STREAM_RECEIVE_SET_ENABLED_FN StreamReceiveSetEnabled
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->StreamReceiveSetEnabled;
                return __ptr0 == IntPtr.Zero? null : (global::AKNet.MSQuicWrapper.QUIC_STREAM_RECEIVE_SET_ENABLED_FN) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::AKNet.MSQuicWrapper.QUIC_STREAM_RECEIVE_SET_ENABLED_FN));
            }

            set
            {
                ((__Internal*)__Instance)->StreamReceiveSetEnabled = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::AKNet.MSQuicWrapper.QUIC_DATAGRAM_SEND_FN DatagramSend
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->DatagramSend;
                return __ptr0 == IntPtr.Zero? null : (global::AKNet.MSQuicWrapper.QUIC_DATAGRAM_SEND_FN) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::AKNet.MSQuicWrapper.QUIC_DATAGRAM_SEND_FN));
            }

            set
            {
                ((__Internal*)__Instance)->DatagramSend = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::AKNet.MSQuicWrapper.QUIC_CONNECTION_COMP_RESUMPTION_FN ConnectionResumptionTicketValidationComplete
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->ConnectionResumptionTicketValidationComplete;
                return __ptr0 == IntPtr.Zero? null : (global::AKNet.MSQuicWrapper.QUIC_CONNECTION_COMP_RESUMPTION_FN) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::AKNet.MSQuicWrapper.QUIC_CONNECTION_COMP_RESUMPTION_FN));
            }

            set
            {
                ((__Internal*)__Instance)->ConnectionResumptionTicketValidationComplete = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::AKNet.MSQuicWrapper.QUIC_CONNECTION_COMP_CERT_FN ConnectionCertificateValidationComplete
        {
            get
            {
                var __ptr0 = ((__Internal*)__Instance)->ConnectionCertificateValidationComplete;
                return __ptr0 == IntPtr.Zero? null : (global::AKNet.MSQuicWrapper.QUIC_CONNECTION_COMP_CERT_FN) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::AKNet.MSQuicWrapper.QUIC_CONNECTION_COMP_CERT_FN));
            }

            set
            {
                ((__Internal*)__Instance)->ConnectionCertificateValidationComplete = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }
    }

    public unsafe partial class msquic
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity, DllImport("msquic", EntryPoint = "MsQuicOpenVersion", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int MsQuicOpenVersion(uint Version, __IntPtr* QuicApi);

            [SuppressUnmanagedCodeSecurity, DllImport("msquic", EntryPoint = "MsQuicClose", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void MsQuicClose(__IntPtr QuicApi);

            [SuppressUnmanagedCodeSecurity, DllImport("MSQuicSSL_Wrapper", EntryPoint = "MsQuicOpen2", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int MsQuicOpen2(__IntPtr QuicApi);
        }

        public static int MsQuicOpenVersion(uint Version, __IntPtr* QuicApi)
        {
            var ___ret = __Internal.MsQuicOpenVersion(Version, QuicApi);
            return ___ret;
        }

        public static void MsQuicClose(__IntPtr QuicApi)
        {
            __Internal.MsQuicClose(QuicApi);
        }

        public static int MsQuicOpen2(global::AKNet.MSQuicWrapper.QUIC_API_TABLE QuicApi)
        {
            var ____arg0 = QuicApi is null ? __IntPtr.Zero : QuicApi.__Instance;
            var __arg0 = new __IntPtr(&____arg0);
            var ___ret = __Internal.MsQuicOpen2(__arg0);
            return ___ret;
        }
    }

    public unsafe partial class QUIC_ADDR_STR : IDisposable
    {
        [StructLayout(LayoutKind.Sequential, Size = 64)]
        public partial struct __Internal
        {
            internal fixed sbyte Address[64];

            [SuppressUnmanagedCodeSecurity, DllImport("MSQuicSSL_Wrapper", EntryPoint = "??0QUIC_ADDR_STR@@QEAA@AEBU0@@Z", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_ADDR_STR> NativeToManagedMap =
            new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::AKNet.MSQuicWrapper.QUIC_ADDR_STR>();

        internal static void __RecordNativeToManagedMapping(IntPtr native, global::AKNet.MSQuicWrapper.QUIC_ADDR_STR managed)
        {
            NativeToManagedMap[native] = managed;
        }

        internal static bool __TryGetNativeToManagedMapping(IntPtr native, out global::AKNet.MSQuicWrapper.QUIC_ADDR_STR managed)
        {
    
            return NativeToManagedMap.TryGetValue(native, out managed);
        }

        protected bool __ownsNativeInstance;

        internal static QUIC_ADDR_STR __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            return new QUIC_ADDR_STR(native.ToPointer(), skipVTables);
        }

        internal static QUIC_ADDR_STR __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (__TryGetNativeToManagedMapping(native, out var managed))
                return (QUIC_ADDR_STR)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                __RecordNativeToManagedMapping(native, result);
            return result;
        }

        internal static QUIC_ADDR_STR __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new QUIC_ADDR_STR(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private QUIC_ADDR_STR(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        protected QUIC_ADDR_STR(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public QUIC_ADDR_STR()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_ADDR_STR.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
        }

        public QUIC_ADDR_STR(global::AKNet.MSQuicWrapper.QUIC_ADDR_STR _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::AKNet.MSQuicWrapper.QUIC_ADDR_STR.__Internal));
            __ownsNativeInstance = true;
            __RecordNativeToManagedMapping(__Instance, this);
            *((global::AKNet.MSQuicWrapper.QUIC_ADDR_STR.__Internal*) __Instance) = *((global::AKNet.MSQuicWrapper.QUIC_ADDR_STR.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true, callNativeDtor : __ownsNativeInstance );
        }

        partial void DisposePartial(bool disposing);

        internal protected virtual void Dispose(bool disposing, bool callNativeDtor )
        {
            if (__Instance == IntPtr.Zero)
                return;
            NativeToManagedMap.TryRemove(__Instance, out _);
            DisposePartial(disposing);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public sbyte[] Address
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<sbyte>(((__Internal*)__Instance)->Address, 64);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 64; i++)
                        ((__Internal*)__Instance)->Address[i] = value[i];
                }
            }
        }
    }
}
